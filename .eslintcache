[{"/home/zhao/src/toppings-vendor/src/index.js":"1","/home/zhao/src/toppings-vendor/src/App.js":"2","/home/zhao/src/toppings-vendor/src/utils/session.js":"3","/home/zhao/src/toppings-vendor/src/pages/Portal.js":"4","/home/zhao/src/toppings-vendor/src/pages/PortalAuthentication.js":"5","/home/zhao/src/toppings-vendor/src/utils/awsConfig.js":"6","/home/zhao/src/toppings-vendor/src/pages/PortalDashboard.js":"7","/home/zhao/src/toppings-vendor/src/pages/PortalOrders.js":"8","/home/zhao/src/toppings-vendor/src/pages/PortalMenu.js":"9","/home/zhao/src/toppings-vendor/src/pages/PortalTermsService.js":"10","/home/zhao/src/toppings-vendor/src/pages/PortalRewards.js":"11","/home/zhao/src/toppings-vendor/src/pages/PortalSettings.js":"12","/home/zhao/src/toppings-vendor/src/graphql/customQueries.js":"13","/home/zhao/src/toppings-vendor/src/graphql/customMutations.js":"14","/home/zhao/src/toppings-vendor/src/graphql/queries.js":"15","/home/zhao/src/toppings-vendor/src/graphql/mutations.js":"16","/home/zhao/src/toppings-vendor/src/utils/useInterval.js":"17","/home/zhao/src/toppings-vendor/src/graphql/customSubscriptions.js":"18","/home/zhao/src/toppings-vendor/src/graphql/subscriptions.js":"19","/home/zhao/src/toppings-vendor/src/components/RadioButton.js":"20","/home/zhao/src/toppings-vendor/src/client.js":"21"},{"size":254,"mtime":1634619999604,"results":"22","hashOfConfig":"23"},{"size":1877,"mtime":1636782885899,"results":"24","hashOfConfig":"23"},{"size":626,"mtime":1636850958726,"results":"25","hashOfConfig":"23"},{"size":6543,"mtime":1637387778377,"results":"26","hashOfConfig":"23"},{"size":8750,"mtime":1636858624586,"results":"27","hashOfConfig":"23"},{"size":1519,"mtime":1636877915441,"results":"28","hashOfConfig":"23"},{"size":320,"mtime":1634619999604,"results":"29","hashOfConfig":"23"},{"size":21207,"mtime":1636876321187,"results":"30","hashOfConfig":"23"},{"size":29211,"mtime":1637572622870,"results":"31","hashOfConfig":"23"},{"size":58015,"mtime":1634619999608,"results":"32","hashOfConfig":"23"},{"size":9213,"mtime":1637387802669,"results":"33","hashOfConfig":"23"},{"size":18347,"mtime":1636785168743,"results":"34","hashOfConfig":"23"},{"size":12421,"mtime":1636783112701,"results":"35","hashOfConfig":"23"},{"size":15088,"mtime":1637469007599,"results":"36","hashOfConfig":"23"},{"size":383274,"mtime":1634619999604,"results":"37","hashOfConfig":"23"},{"size":724633,"mtime":1634619999604,"results":"38","hashOfConfig":"23"},{"size":486,"mtime":1634619999608,"results":"39","hashOfConfig":"23"},{"size":1930,"mtime":1636783051392,"results":"40","hashOfConfig":"23"},{"size":717763,"mtime":1634619999604,"results":"41","hashOfConfig":"23"},{"size":569,"mtime":1634619999600,"results":"42","hashOfConfig":"23"},{"size":1596,"mtime":1637545835652,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"g3hppg",{"filePath":"47","messages":"48","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":1,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":51,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":1,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"46"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"46"},"/home/zhao/src/toppings-vendor/src/index.js",[],["98","99"],"/home/zhao/src/toppings-vendor/src/App.js",["100","101","102","103","104","105","106"],"import './styles/App.css';\nimport './styles/Portal.css';\nimport './styles/PortalAuthentication.css';\nimport './styles/PortalOrders.css';\nimport './styles/PortalTermsService.css';\nimport './styles/PortalMenu.css';\nimport './styles/PortalRewards.css';\nimport './styles/PortalSettings.css';\n\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Route, Link, Redirect } from 'react-router-dom';\nimport { ApolloProvider } from '@apollo/client';\n\nimport { getCurrentUser, setupSession, clearSession, getCurrentPage } from './utils/session';\nimport client from './client';\n\nimport logo from './assets/images/logo-white.png';\nimport Portal from './pages/Portal';\nimport PortalAuthentication from './pages/PortalAuthentication';\n\nfunction App() {\n  const [showHeader, toggleShowHeader] = useState(true);\n  const [user, setUser] = useState({});\n\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"wrapper\">\n        <Route exact path=\"/portal/:selection\" render={() => <Portal toggleShowHeader={toggleShowHeader} user={user} setUser={setUser} />} />\n        <Route exact path=\"/portal-auth/:selection\" render={() => <PortalAuthentication toggleShowHeader={toggleShowHeader} user={user} setUser={setUser} />} />\n        \n        <Redirect to={`/portal-auth/sign-in`} />\n        {showHeader ?\n          <header className=\"primary\">\n            <nav>\n              <span className=\"heading\"><Link className=\"nav-link\" to=\"/portal-auth/sign-in\"><img src={logo} /></Link></span>\n\n              <ul className=\"nav-buttons links\">\n                {/*<li><Link className=\"nav-link\" to=\"/\">About Us</Link></li>*/}\n                {/*<li><Link className=\"nav-link\" to=\"/portal-auth/sign-in\">Vendor Portal</Link></li>*/}\n              </ul>\n            </nav>\n          </header>\n        : \"\"}\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","/home/zhao/src/toppings-vendor/src/utils/session.js",[],"/home/zhao/src/toppings-vendor/src/pages/Portal.js",["107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130"],"import React, { useState, useEffect, useRef } from 'react';\nimport { Switch, Route, Link, Redirect } from 'react-router-dom';\n\nimport Amplify, { Auth, API, graphqlOperation } from 'aws-amplify';\nimport { useQuery } from '@apollo/client';\n\nimport awsConfig from '../utils/awsConfig';\nimport * as queries from '../graphql/queries';\nimport * as customQueries from '../graphql/customQueries';\nimport * as mutations from '../graphql/mutations';\nimport { getCurrentUser, setCurrentUser, getCurrentPage, setCurrentPage, clearSession } from '../utils/session';\nimport PortalDashboard from './PortalDashboard';\nimport PortalOrders from './PortalOrders';\nimport PortalTermsService from './PortalTermsService';\nimport PortalMenu from './PortalMenu';\nimport PortalRewards from './PortalRewards';\nimport PortalSettings from './PortalSettings';\n\nimport logo from '../assets/images/logo-white.png';\nimport dashboardIcon from '../assets/images/portal-dashboard-icon.svg';\nimport ordersIcon from '../assets/images/portal-orders-icon.svg';\nimport termsServiceIcon from '../assets/images/portal-terms-service-icon.svg';\nimport menuIcon from '../assets/images/portal-menu-icon.svg';\nimport rewardsIcon from '../assets/images/portal-rewards-icon.svg';\nimport settingsIcon from '../assets/images/portal-settings-icon.svg';\nimport logoutIcon from '../assets/images/portal-logout-icon.svg';\n\nAmplify.configure(awsConfig);\n\nfunction Portal(props) {\n  const [portalSelection, setPortalSelection] = useState(window.location.href.slice(window.location.href.indexOf(\"/portal/\") + \"/portal/\".length));\n  const [loggedIn, setLoggedIn] = useState(getCurrentUser() != null);\n  const [restaurant, setRestaurant] = useState({});\n\n  useEffect(() => {\n    props.toggleShowHeader(false);\n    console.log(\"U\", props.user)\n  }, []);\n\n  let { data: vendorData, error: vendorError, loading: vendorLoading } = useQuery(customQueries.getVendor);\n  if (vendorData) {\n    console.log(\"vendor\", vendorData)\n  }\n  if (vendorError) console.log(\"vendorerror\", vendorError);\n\n  // async function getData() {\n  //   // await props.setUser(getCurrentUser());\n  //   // console.log(\"PU\", props.user)\n  //   // console.log(\"PU\", getCurrentUser())\n  //   // if (getCurrentUser().hasOwnProperty(\"username\")) {\n  //     // await login();\n  //     console.log(\"GD\")\n  //     const userId = await getCurrentUser() == null ? props.user.sub : await getCurrentUser().cognitoId;\n  //     console.log(\"GET RESTU\", userId)\n  //     const restaurantsResponse = await API.graphql(graphqlOperation(customQueries.getRestaurantByOwner, { userId }));\n  //     console.log(\"HELOOOOOOO\");\n  //     console.log(\"Set restaurant resp\", restaurantsResponse);\n  //     const restaurant = restaurantsResponse.data.getRestaurantByOwner;\n  //     setRestaurant(restaurant);\n  //     console.log(\"Set restaurant props\", restaurant);\n  //   // }\n  // }\n\n  async function login() {\n    console.log(\"LOGIN\");\n    // await Auth.signIn(getCurrentUser());\n  }\n\n  function logout() {\n    Auth.signOut().then(() => {\n      setLoggedIn(false);\n      clearSession(\"user\");\n      clearSession(\"page\");\n      props.toggleShowHeader(true);\n    }).catch((error) => {\n      console.log(\"Error signing out\", error);\n    });\n  }\n  if (vendorLoading) return null;\n  if (vendorError) {\n    console.log('error', vendorError);\n    return null;\n  }\n  console.log(\"vendorrrrr\", vendorData.getVendor.restaurant);\n  return (\n    <section className=\"portal-login-container\">\n      {loggedIn ?\n        <article className=\"portal-container\">\n          <nav>\n            <Link to=\"/\"><img className=\"portal-toppings-logo\" src={logo} /></Link>\n\n            <ul className=\"nav-buttons\">\n              {/*<li><Link to=\"/portal/dashboard\"><span className={portalSelection == \"dashboard\" ? \"portal-nav-option active\" : \"portal-nav-option\"} onClick={() => setPortalSelection(\"dashboard\")}><img src={dashboardIcon} /> Dashboard</span></Link></li>*/}\n              <li><Link to=\"/portal/orders\" onClick={() => setCurrentPage(\"orders\")}><span className={portalSelection == \"orders\" ? \"portal-nav-option active\" : \"portal-nav-option\"} onClick={() => setPortalSelection(\"orders\")}><img src={ordersIcon} /> Orders</span></Link></li>\n              <li><Link to=\"/portal/terms-of-service\" onClick={() => setCurrentPage(\"terms-of-service\")}><span className={portalSelection == \"terms-of-service\" ? \"portal-nav-option active\" : \"portal-nav-option\"} onClick={() => setPortalSelection(\"terms-of-service\")}><img src={termsServiceIcon} /> Terms of Service</span></Link></li>\n              <li><Link to=\"/portal/menu\" onClick={() => setCurrentPage(\"menu\")}><span className={portalSelection == \"menu\" ? \"portal-nav-option active\" : \"portal-nav-option\"} onClick={() => setPortalSelection(\"menu\")}><img src={menuIcon} /> Your Menu</span></Link></li>\n              <li><Link to=\"/portal/rewards\" onClick={() => setCurrentPage(\"rewards\")}><span className={portalSelection == \"rewards\" ? \"portal-nav-option active\" : \"portal-nav-option\"} onClick={() => setPortalSelection(\"rewards\")}><img src={rewardsIcon} /> Your Active Rewards</span></Link></li>\n              <li><Link to=\"/portal/settings\" onClick={() => setCurrentPage(\"settings\")}><span className={portalSelection == \"settings\" ? \"portal-nav-option active\" : \"portal-nav-option\"} onClick={() => setPortalSelection(\"settings\")}><img src={settingsIcon} /> Account Settings</span></Link></li>\n              <li><span className=\"portal-nav-option\" onClick={logout}><img src={logoutIcon} /> Log Out</span></li>\n            </ul>\n            <div className=\"portal-version-label\">Version 2.0.1</div>\n          </nav>\n\n          <main>\n            <Switch>\n              <Route path=\"/portal/dashboard\" component={() => <PortalDashboard restaurant={vendorData.getVendor.restaurant} />} />\n              <Route path=\"/portal/orders\" component={() => <PortalOrders vendor={vendorData} />} />\n              <Route path=\"/portal/terms-of-service\" component={() => <PortalTermsService restaurant={vendorData.getVendor.restaurant} />} />\n              <Route path=\"/portal/menu\" component={() => <PortalMenu vendor={vendorData} />} />\n              <Route path=\"/portal/rewards\" component={() => <PortalRewards vendor={vendorData} />} />\n              <Route path=\"/portal/settings\" component={() => <PortalSettings restaurant={vendorData.getVendor.restaurant} />} />\n            </Switch>\n          </main>\n        </article>\n        :\n        <Redirect to=\"/portal-auth/sign-in\" />\n      }\n    </section>\n  );\n}\n\nexport default Portal;\n","/home/zhao/src/toppings-vendor/src/pages/PortalAuthentication.js",["131","132","133","134","135","136","137","138","139","140","141","142"],"import React, { useState, useEffect, useRef } from 'react';\nimport { Switch, Route, Link, Redirect } from 'react-router-dom';\n\nimport Amplify, { Auth, API, graphqlOperation } from 'aws-amplify';\nimport awsConfig from '../utils/awsConfig';\nimport * as queries from '../graphql/queries';\nimport * as mutations from '../graphql/mutations';\nimport * as customMutations from '../graphql/customMutations';\n\nimport { getCurrentUser, setCurrentUser, getCurrentPage, setCurrentPage, clearSession } from '../utils/session';\n\nAmplify.configure(awsConfig);\n\nfunction PortalSignUp(props) {\n  const nameInput = useRef();\n  const emailInput = useRef();\n  const passwordInput = useRef();\n  const phoneNumberInput = useRef();\n  const codeInput = useRef();\n\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  const [successMsg, setSuccessMsg] = useState(\"\");\n  const [signedUp, setSignedUp] = useState(false);\n  const [confirmed, setConfirmed] = useState(false);\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [userName, setUserName] = useState(false);\n\n  useEffect(() => {\n    props.toggleShowHeader(true);\n\n    let user = getCurrentUser();\n    let page = getCurrentPage();\n    if (user != null && page != null) {\n      emailInput.current.value = user.attributes.email;\n      passwordInput.current.value = '';\n      login(null);\n      console.log(\"user\", user);\n    }\n  }, []);\n\n  function signUp(e) {\n    e.preventDefault();\n    let name = nameInput.current.value;\n    let email = emailInput.current.value;\n    let password = passwordInput.current.value;\n    let phoneNumber = phoneNumberInput.current.value.replaceAll(/-/g, \"\").replaceAll(/\\s/g, \"\");\n\n    if (phoneNumber.charAt(0) !== \"+\") {\n        phoneNumber = \"+\" + (phoneNumber.length === 10 ? \"1\" : \"\") + phoneNumber;\n    }\n    \n    if (name.length > 0 && email.length > 0 && phoneNumber.length >= 10 && password.length > 0) {\n      Auth.signUp({ \n        username: email, \n        password: password,\n        attributes: {\n          name: name,\n          phone_number: phoneNumber,\n        }\n      }).then(() => {\n        setSignedUp(true);\n        setSuccessMsg(\"Account created, please enter the confirmation code.\");\n        setErrorMsg(\"\");\n        setUserName(name);\n      }).catch((error) => {\n        setErrorMsg(error.message);\n      });\n    } else {\n      setErrorMsg(\"Account info is incomplete.\");\n    }\n  }\n\n  async function confirmSignUp(e) {\n    e.preventDefault();\n    let name = userName;\n    let email = emailInput.current.value;\n    let code = codeInput.current.value;\n\n    if (email.length > 0 && code.length > 0) {\n      await Auth.confirmSignUp(email, code)\n        // setSignedUp(true);\n      // }).catch((error) => {\n      //   setErrorMsg(error.message);\n      //   if (error.message.indexOf(\"Current status is CONFIRMED\") > -1 /*|| error.message.indexOf(\"Invalid JSON\") > -1*/) {\n      //     setConfirmed(true);\n      //     setErrorMsg(\"\");\n      //     setSuccessMsg(\"Account confirmed, please sign in.\");\n\n      //     const user = {\n      //       name: name,\n      //       email: email\n      //     }\n      //   }\n      // });\n      setConfirmed(true);\n      setErrorMsg(\"\");\n      setSuccessMsg(\"Account confirmed, please sign in.\");\n\n      // const restaurant = {\n      //   name: \"Your Restaurant Name\",\n      //   email: email,\n      //   address: \"Your Address\",\n      //   city: \"Your City\",\n      //   description: \"Your Restaurant Description\",\n      //   lat: null,\n      //   long: null,\n      //   phone_number: null,\n      //   state: \"Your State\",\n      //   zip_code: \"Your Zip Code\"\n      // };\n\n      // API.graphql(graphqlOperation(customMutations.createRestaurant, restaurant))\n      // .then(createRestaurantResp => {\n      //   console.log('Create Restaurant', createRestaurantResp);\n      //   setErrorMsg('');\n      // })\n      // .catch(err => {\n      //   console.log(err);\n      // });\n    } else {\n      setErrorMsg(\"Account info is incomplete.\");\n    }\n  }\n\n  async function login(e) {\n    console.log('dalk');\n    if (e != null) {\n      console.log('wot');\n      e.preventDefault();\n    }\n\n    console.log(awsConfig);\n\n    let email = emailInput.current.value;\n    let password = passwordInput.current.value;\n    \n    console.log('HI');\n    if (email.length > 0 && password.length > 0) {\n      const user = { \n        username: email, \n        password: password,\n      };\n      console.log(user);\n      const result = await Auth.signIn(user); //.then(() => {\n      console.log(\"auth sign in\", result);\n      setCurrentUser(result);\n\n      const currentUser = await Auth.currentAuthenticatedUser();\n\n        const restaurant = {\n          name: \"Your Restaurant Name\",\n          userId: currentUser.attributes.sub,\n          address: \"Your Address\",\n          city: \"Your City\",\n          description: \"Your Restaurant Description\",\n          lat: 100.0,\n          long: 100.0,\n          phoneNumber: '+15105132142',\n          state: \"Your State\",\n          zip_code: \"Your Zip Code\",\n          isOpen: \"true\",\n        };\n        \n        await API.graphql(graphqlOperation(customMutations.createRestaurant, restaurant));\n\n        const userWithSub = {\n          ...user,\n          cognitoId: currentUser.attributes.sub,\n        };\n      //   .then(createRestaurantResp => {\n      //     console.log('Create Restaurant', createRestaurantResp);\n      //     setErrorMsg('');\n      //   })\n      //   .catch(err => {\n      //     console.log(err);\n      //   });\n      // }).catch((error) => {\n      //   setErrorMsg(error.message);\n      // });\n            \n      if (getCurrentPage() == null) {\n        setCurrentPage(\"orders\");\n      }\n\n\n      props.setUser(userWithSub);\n      setLoggedIn(true);\n    } else {\n      setErrorMsg(\"Login info is incomplete.\");\n    }\n  }\n\n  return (\n    <section className=\"portal-login-container\">\n      {loggedIn ? \n        <Redirect to={`/portal/${getCurrentPage()}`} />\n        :\n        <article className=\"login-container\">\n          <div className=\"login-panel\">\n            <h1>\n              Vendor Portal\n            </h1>\n\n            <Switch>\n              <Route path=\"/portal-auth/sign-up\">\n                {!signedUp && !confirmed ? \n                  <form onSubmit={signUp}>\n                    {errorMsg != \"\" ? <span className=\"login-message\">{errorMsg}</span> : \"\"}\n                    <label htmlFor=\"name\">Name</label><input className=\"text-input\" type=\"text\" ref={nameInput} />\n                    <label htmlFor=\"email\">Email Address</label><input className=\"text-input\" type=\"email\" ref={emailInput} />\n                    <label htmlFor=\"phone\">Phone Number</label><input className=\"text-input\" type=\"tel\" ref={phoneNumberInput} defaultValue=\"\" />\n                    <label htmlFor=\"password\">Password</label><input className=\"text-input\" type=\"password\" ref={passwordInput} />\n                    <input className=\"submit-button\" type=\"submit\" value=\"Submit\" />\n                  </form>\n                : signedUp && !confirmed ?\n                  <form onSubmit={confirmSignUp}>\n                    {errorMsg == \"\" && successMsg != \"\" ? <span className=\"login-message success\">{successMsg}</span> : \"\"}\n                    {errorMsg != \"\" ? <span className=\"login-message\">{errorMsg}</span> : \"\"}\n                    <label htmlFor=\"email\">Email Address</label><input className=\"text-input\" type=\"email\" ref={emailInput} />\n                    <label htmlFor=\"code\">Confirmation Code</label><input className=\"text-input\" type=\"text\" ref={codeInput} />\n                    <input className=\"submit-button\" type=\"submit\" value=\"Submit\" />\n                  </form>\n                : \n                  <Redirect to=\"/portal-auth/sign-in\" />\n                }\n\n                <span>Already have an account? <Link to=\"/portal-auth/sign-in\">Sign In</Link></span>\n              </Route>\n              <Route path=\"/portal-auth/sign-in\">\n                <form onSubmit={login}>\n                  {errorMsg == \"\" && successMsg != \"\" ? <span className=\"login-message success\">{successMsg}</span> : \"\"}\n                  {errorMsg != \"\" ? <span className=\"login-message\">{errorMsg}</span> : \"\"}\n                  <label htmlFor=\"email\">Email Address</label><input className=\"text-input\" ref={emailInput} />\n                  <label htmlFor=\"password\">Password</label><input className=\"text-input\" type=\"password\" ref={passwordInput} />\n                  <input className=\"submit-button\" type=\"submit\" value=\"Submit\" />\n                </form>\n\n                <span>Don't have an account? <Link to=\"/portal-auth/sign-up\">Sign Up</Link></span>\n              </Route>\n            </Switch>\n          </div>\n        </article>\n      }\n    </section>\n  );\n}\n\nexport default PortalSignUp;\n","/home/zhao/src/toppings-vendor/src/utils/awsConfig.js",[],"/home/zhao/src/toppings-vendor/src/pages/PortalDashboard.js",["143","144","145","146"],"import React, { useState, useEffect, useRef } from 'react';\n\nimport dashboardDesign from '../assets/images/dashboard-design.PNG';\n\nfunction PortalDashboard(props) {\n  return (\n    <article className=\"portal-dashboard-container\">\n      <img src={dashboardDesign} />\n    </article>\n  );\n}\n\nexport default PortalDashboard;\n","/home/zhao/src/toppings-vendor/src/pages/PortalOrders.js",["147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172"],"import React, { useState, useEffect, useRef } from 'react';\n\nimport Amplify, { Auth, API, graphqlOperation } from 'aws-amplify';\n\nimport awsConfig from '../utils/awsConfig';\nimport useInterval from '../utils/useInterval';\nimport * as queries from '../graphql/queries';\nimport * as mutations from '../graphql/mutations';\nimport * as subscriptions from '../graphql/subscriptions'\nimport * as customQueries from '../graphql/customQueries';\nimport * as customMutations from '../graphql/customMutations';\nimport * as customSubscription from '../graphql/customSubscriptions';\n\nimport loadingBubbleIcon from '../assets/images/bubble-icon-1.svg';\nimport bubbleIcon from '../assets/images/bubble-icon-2.svg';\nimport whiteCheckmark from '../assets/images/white-checkmark.svg';\nimport grayCheckmark from '../assets/images/gray-checkmark.svg';\nimport ding from '../assets/audio/ding.mp3';\nimport { ConsoleLogger } from '@aws-amplify/core';\n\nfunction PortalOrders(props) {\n  const newOrderTimeStamp = 30;\n  const preparingOrderTimeStamp = 15;\n  const readyOrderTimeStamp = 5;\n  const deliveredOrderTimeStamp = 0;\n  const cancelledOrderTimeStamp = -1;\n  const dingTimer = 5000;\n\n  let restaurantSk = props.vendor.getVendor.restaurant.sk;\n  let restaurantId = restaurantSk.slice(restaurantSk.lastIndexOf(\"#\")+1)\n\n  const audio = new Audio(ding);\n  const [loading, setLoading] = useState(false);\n  //const [audio] = useState(new Audio(ding));\n  const [selectedOrder, selectOrder] = useState(null); \n  const [receivingOrders, setReceivingOrders] = useState(true);\n  const [hasNew, setHasNew] = useState(false);\n  const [orders, setOrders] = useState({\n    // New: [{id: 73, deliverer: \"Patrick Star\", customer: \"Gary\", tip: 0.00, instructions: \"Meow\", items: [{name: \"Golden Loaf\", price: 2.50}, {name: \"Krabby Patty\", price: 2.99}]}, \n    //       {id: 72, deliverer: \"Plankton\", customer: \"Karen\", tip: 2.00, instructions: \"Give me the secret formula Mr. Krabs!\", items: [{name: \"Krabby Patty\", price: 2.99}]}],\n    // Preparing: [{id: 71, deliverer: \"Triton\", customer: \"King Neptune\", tip: 1.00, instructions: \"Extra jelly please!\", items: [{name: \"Jelly Patty\", price: 3.99}, {name: \"Jelly Patty\", price: 3.99}, {name: \"Jelly Patty\", price: 3.99}]}, \n    //             {id: 70, deliverer: \"Princess Mindy\", customer: \"King Neptune\", tip: 0.80, instructions: \"\", items: [{name: \"Fried Oyster Skin\", price: 0.99}, {name: \"Golden Loaf\", price: 2.50}]}],\n    // Ready: [{id: 69, deliverer: \"Larry the Lobster\", customer: \"Mrs. Puff\", tip: 1.00, instructions: \"\", items: [{name: \"Krabby Patty\", price: 2.99}, {name: \"Krabby Patty\", price: 2.99}, {name: \"Jelly Patty\", price: 3.99}]}]\n    \n    New: [],\n    Preparing: [],\n    Ready: [],\n    // Cancelled: [],\n  });\n  let timerId;\n  useEffect(() => {\n    setLoading(true);\n    \n    getData();\n    orderReceived();\n  }, []);\n\n  useInterval(() => {\n    audio.play();\n  }, hasNew ? dingTimer : null);\n  \n  async function toggleReceivingOrders() {\n    console.log(\"TOG\")\n    console.log(\"selectedorder:\", selectedOrder);\n    const updatedRestaurant = {\n      id: restaurantId,\n      input: { isOpen: !receivingOrders ? \"true\" : \"false\", },\n    };\n\n    console.log(\"ur\", updatedRestaurant)\n\n    // const updatedRestaurantResponse = await API.graphql(graphqlOperation(mutations.updateRestaurant, { input: updatedRestaurant }));\n    const updatedRestaurantResponse = await API.graphql(graphqlOperation(customMutations.updateRestaurant, updatedRestaurant));\n    console.log(updatedRestaurantResponse)\n    setReceivingOrders(updatedRestaurantResponse.data.updateRestaurantFields.isOpen === \"true\");\n  }\n\n  async function timerAdvanceOrder(order, currentStatus) {\n    console.log(\"crashing is fun\");\n    advanceOrder(selectedOrder, \"New\");\n    setTimeout(()=>advanceOrder(selectedOrder, \"Preparing\"), 900000);\n  }\n  async function advanceOrder(order, currentStatus) {\n    console.log(\"advance status:\", currentStatus);\n    const ordersCopy = orders;\n    ordersCopy[currentStatus] = ordersCopy[currentStatus].filter(item => item != order);\n    if (currentStatus == \"Incoming\") {\n      ordersCopy[\"New\"].push(order);\n\n    } else if (currentStatus == \"New\") {\n      ordersCopy[\"Preparing\"].push(order);\n      const updatedOrder = {\n        id: order.id,\n        food_ready_time: preparingOrderTimeStamp,\n        status: 'PREPARING',\n      };\n\n      await API.graphql(graphqlOperation(customMutations.updateFoodReady, updatedOrder));\n      // const updatedOrderResponse = await API.graphql(graphqlOperation(mutations.updateOrder, { input: updatedOrder }));\n    } else if (currentStatus == \"Preparing\") {\n      ordersCopy[\"Ready\"].push(order);\n      const updatedOrder = {\n        id: order.id,\n        food_ready_time: readyOrderTimeStamp,\n        status: 'READY',\n      };\n\n      await API.graphql(graphqlOperation(customMutations.updateFoodReady, updatedOrder));\n      // const updatedOrderResponse = await API.graphql(graphqlOperation(mutations.updateOrder, { input: updatedOrder }));\n    } else if (currentStatus == \"Ready\" || currentStatus == \"Cancelled\") {\n      const updatedOrder = {\n        id: order.id,\n        food_ready_time: deliveredOrderTimeStamp\n      };\n\n      // const updatedOrderResponse = await API.graphql(graphqlOperation(mutations.deleteOrder, { input: updatedOrder }));\n      // const updatedOrderResponse = await API.graphql(graphqlOperation(mutations.updateOrder, { input: updatedOrder }));\n      await API.graphql(graphqlOperation(customMutations.updateFoodReady, updatedOrder));\n      selectOrder(null);\n    }\n\n    if (ordersCopy.New.length + ordersCopy.Preparing.length + ordersCopy.Ready.length <= 0) {\n      selectOrder(null);\n    }\n    if (ordersCopy.New.length < 1) {\n      console.log(\"RESET AUDIO\");\n      setHasNew(false);\n    }\n\n    setOrders({... ordersCopy});\n  }\n  async function orderReceived() {\n\n    await API.graphql(graphqlOperation(customSubscription.onCreateNewPickup)).subscribe({ next: (eventData) => {\n      console.log(\"EDY\", eventData);\n      getData();\n    }});\n\n    await API.graphql(graphqlOperation(customSubscription.onCreateNewOrder)).subscribe({ next: (eventData) => {\n      console.log(\"EDZ\", eventData);\n      getData();\n      // const order = eventData.value.data.onUpdateOrder;\n      // const oldOrder = [...orders.New, ...orders.Preparing, ...orders.Ready].filter(o => o.id == order.id)[0];\n      // console.log(\"RECEIVED\", order);\n      // console.log(\"EXISTING?\", oldOrder);\n      // if (order.restaurant.id == restaurantId && order.isPaid) {\n      //   if (order.food_ready_time == null || order.food_ready_time >= newOrderTimeStamp) {\n      //     const date = new Date(Date.parse(order.createdAt));\n      //     const newOrder = {\n      //       ...order,\n      //       id: order.id,\n      //       deliverer: order.pickup.deliverer.name,\n      //       customer: order.customer.name,\n      //       tip: order.tip,\n      //       instructions: order.comment != null ? order.comment.toString() : \"\",\n      //       items: order.orderItems.items,\n      //       time: `${date.getHours()}:${date.getMinutes().toString().padStart(2, \"0\")}:${date.getSeconds().toString().padStart(2, \"0\")} (${date.getMonth() + 1}/${date.getDate()})`,\n      //       food_ready_time: order.hasOwnProperty(\"food_ready_time\") && order.food_ready_time != null ? order.food_ready_time : newOrderTimeStamp,\n      //     };\n\n      //     /*if (newOrder.closed && newOrder.food_ready_time > deliveredOrderTimeStamp) {\n      //       setOrders(oldOrders => ({\n      //         ...oldOrders,\n      //         Cancelled: [newOrder, ...oldOrders[\"Cancelled\"]],\n      //       }));\n      //     } else */if (newOrder.food_ready_time > preparingOrderTimeStamp) {\n      //       setOrders(oldOrders => ({\n      //         ...oldOrders,\n      //         New: [newOrder, ...oldOrders[\"New\"]],\n      //       }));\n      //       audio.play();\n      //     } else if (newOrder.food_ready_time > readyOrderTimeStamp) {\n      //       setOrders(oldOrders => ({\n      //         ...oldOrders,\n      //         Preparing: [newOrder, ...oldOrders[\"Preparing\"]],\n      //       }));\n      //     } else if (newOrder.food_ready_time > deliveredOrderTimeStamp) {\n      //       setOrders(oldOrders => ({\n      //         ...oldOrders,\n      //         Ready: [newOrder, ...oldOrders[\"Ready\"]],\n      //       }));\n      //     }\n      //   } /*else if (oldOrder != null && !oldOrder.closed && order.closed) {\n      //     setOrders(oldOrders => ({\n      //       ...oldOrders,\n      //       Cancelled: [newOrder, ...oldOrders[\"Cancelled\"]],\n      //     }));\n      //   }*/\n      // }\n    }});\n  }\n\n  async function getData() {\n    console.log(\"PROPS\", props.vendor);\n    const receivedOrdersResponse = await API.graphql(graphqlOperation(customQueries.listOrdersByRestaurant, { restaurantId: restaurantId }));\n    // const receivedOrdersResponse = await API.graphql(graphqlOperation(queries.listOrders));\n    console.log(receivedOrdersResponse);\n    const receivedOrders = receivedOrdersResponse.data.listOrdersByRestaurant;\n    for (let i = 0; i < receivedOrders?.data?.listOrdersByRestaurant?.length; i++) {\n      receivedOrders.data.listOrdersByRestaurant[i].customer = JSON.parse(receivedOrders.data.listOrdersByRestaurant[i].customer);\n      receivedOrders.data.listOrdersByRestaurant[i].pickup.deliverer = JSON.parse(receivedOrders.data.listOrdersByRestaurant[i].pickup.deliverer);\n    }\n\n    setOrders({\n      New: [],\n      Preparing: [],\n      Ready: [],\n    });\n    receivedOrders.forEach(order => {\n      if (order.restaurant.id == restaurantId && order.isPaid) {\n        const date = new Date(Date.parse(order.createdAt));\n        console.log(\"ORDER INFO:\", order);\n        const myOrder = {\n          ...order,\n          id: order.id, \n          deliverer: JSON.parse(order.pickup.deliverer).name, \n          customer: JSON.parse(order.customer).name, \n          tip: order.tip, \n          instructions: order.comment != null ? order.comment.toString() : \"\",\n          items: order.orderItems.items,\n          time: `${date.getHours()}:${date.getMinutes().toString().padStart(2, \"0\")}:${date.getSeconds().toString().padStart(2, \"0\")} (${date.getMonth() + 1}/${date.getDate()})`,\n          food_ready_time: order.hasOwnProperty(\"food_ready_time\") && order.food_ready_time != null ? order.food_ready_time : newOrderTimeStamp,\n        }\n        console.log(\"myorder info\", myOrder.customer)\n        /*if (myOrder.closed && myOrder.food_ready_time > deliveredOrderTimeStamp) {\n          setOrders(oldOrders => ({\n            ...oldOrders,\n            Cancelled: [myOrder, ...oldOrders[\"Cancelled\"]],\n          }));\n        } else*/ if (/*!myOrder.closed && */myOrder.food_ready_time > preparingOrderTimeStamp) {\n          setOrders(oldOrders => ({\n            ...oldOrders,\n            New: [myOrder, ...oldOrders[\"New\"]],\n          }));\n          setHasNew(true);\n          console.log('set hasNew to true', myOrder)\n        }  else if (/*!myOrder.closed && */myOrder.food_ready_time > deliveredOrderTimeStamp) {\n          setOrders(oldOrders => ({\n            ...oldOrders,\n            Ready: [myOrder, ...oldOrders[\"Ready\"]],\n          }));\n        }\n        // else if (/*!myOrder.closed && */myOrder.food_ready_time > readyOrderTimeStamp) {\n        //   setOrders(oldOrders => ({\n        //     ...oldOrders,\n        //     Preparing: [myOrder, ...oldOrders[\"Preparing\"]],\n        //   }));\n        // } else if (/*!myOrder.closed && */myOrder.food_ready_time > deliveredOrderTimeStamp) {\n        //   setOrders(oldOrders => ({\n        //     ...oldOrders,\n        //     Ready: [myOrder, ...oldOrders[\"Ready\"]],\n        //   }));\n        // }\n      }\n    });\n\n    setLoading(false);\n  }\n\n  console.log(\"ORDERS:\", orders);\n  return (\n    <article className=\"portal-orders-container\">\n    {loading ? \n      <div>\n        <header>\n          <img className=\"portal-empty-image\" src={loadingBubbleIcon} />\n          <span className=\"subheading\">Loading...</span>\n        </header>\n      </div>  \n    :\n      <div>\n        {Object.keys(orders).length > 0 ?\n          <div className=\"portal-orders-subcontainer\">\n            <div className=\"orders-list\">\n              <header>\n                <span className=\"orange-subheading\">{`${new Date().getMonth() + 1}/${String(new Date().getDate()).padStart(2, \"0\")}/${String(new Date().getFullYear()).slice(2, 4)}`}</span>\n                <button className={receivingOrders ? \"orange tag\" : \"red tag\"} onClick={toggleReceivingOrders}>Receiving New Orders {receivingOrders ? <img className=\"checkmark\" src={whiteCheckmark} /> : <span className=\"x\">&#215;</span>}</button>\n              </header>\n              <div>\n                <span className=\"order-category\">Current</span>\n                <div>\n                  {orders.New.length > 0 &&\n                    orders.New.sort((order1, order2) => (order1.time.split(\" \")[1] + order1.time.split(\" \")[0] > order2.time.split(\" \")[1] + order2.time.split(\" \")[0] ? 1 : -1)).map(order => \n                      <div key={order.id} className={selectedOrder == order ? \"order-container active\" : \"order-container\"} onClick={() => {selectOrder(order); console.log(order)}}>\n                        <span>#{order.id.slice(0, 5)}...</span>  \n                        <span><button>New</button></span>\n                      </div>\n                    )\n                  }\n                  {orders.Preparing.length > 0 &&\n                    orders.Preparing.sort((order1, order2) => (order1.time.split(\" \")[1] + order1.time.split(\" \")[0] > order2.time.split(\" \")[1] + order2.time.split(\" \")[0] ? 1 : -1)).map(order => \n                      <div key={order.id} className={selectedOrder == order ? \"order-container active\" : \"order-container\"} onClick={() => {selectOrder(order); console.log(order)}}>\n                        <span>#{order.id.slice(0, 5)}...</span> \n                      </div>\n                    )\n                  }\n                </div>\n                <span className=\"order-category\">Completed</span>\n                <div>\n                  {orders.Ready.length > 0 &&\n                    orders.Ready.sort((order1, order2) => (order1.time.split(\" \")[1] + order1.time.split(\" \")[0] > order2.time.split(\" \")[1] + order2.time.split(\" \")[0] ? 1 : -1)).map(order => \n                      <div key={order.id} className={selectedOrder == order ? \"order-container active\" : \"order-container\"} onClick={() => {selectOrder(order); console.log(order)}}>\n                        <span>#{order.id.slice(0, 5)}...</span>  \n                      </div>\n                    )\n                  }\n                </div>\n              </div>\n              {/* <div>\n                \n                <div className=\"order-category-container\">\n                  {Object.keys(orders).map((category =>\n                    <div key={category}>\n                      {orders[category].length > 0 &&\n                        orders[category].sort((order1, order2) => (order1.time.split(\" \")[1] + order1.time.split(\" \")[0] > order2.time.split(\" \")[1] + order2.time.split(\" \")[0] ? 1 : -1)).map(order => \n                          <div key={order.id} className={selectedOrder == order ? \"order-container active\" : \"order-container\"} onClick={() => {selectOrder(order); console.log(order)}}>\n                            <span>#{order.id.slice(0, 5)}...</span> \n                            <span>{category == \"New\" ? <button>New</button> : \"\"}</span>\n                          </div>\n                        )\n                      }\n                    </div>\n                  ))}\n                </div>\n              </div>*/}\n            </div>\n            <div className=\"portal-orders-info\">\n              {selectedOrder != null ? \n                <div>\n                  <header>\n                    <span className=\"subheading\">Items <br />\n                      <span className=\"blue-subheading\">{selectedOrder.items.length}</span>\n                    </span>\n                    \n                    <span className=\"subheading\">Deliverer <br />\n                      <span className=\"blue-subheading\">{selectedOrder.deliverer}</span>\n                    </span>\n                    \n                    <span className=\"subheading\">Customer <br />\n                      <span className=\"blue-subheading\">{selectedOrder.customer}</span>\n                    </span>\n                  </header>\n\n                  <div className=\"order-details\">\n                    {orders.Preparing.indexOf(selectedOrder) > -1 ? \n                      <div className=\"order-delivery-time\">\n                        <span className=\"blue-subheading\">Estimated Time:</span>\n                        <button className=\"blue\">15 Minutes</button>\n                      </div>\n                    : \"\"} \n\n                    {orders.Ready.indexOf(selectedOrder) > -1 ? \n                      <div className=\"order-delivery-time\">\n                        {/* <span className=\"blue-subheading\">Waiting for delivery confirmation.</span> */}\n                      </div>\n                    : \"\"}\n\n                    <span className=\"heading\">Order #{selectedOrder.id.slice(0, 5)} - {selectedOrder.time}</span>\n                    {false && selectedOrder.closed ? <span className=\"red-subheading\">Order Closed</span> : \"\"}\n                    <hr className=\"short\" />\n\n                    <div className=\"order-bill\">\n                      {selectedOrder.items.map((item => \n                        <div key={Math.random()} className=\"order-item\">\n                          <span className=\"order-item-name\">{item.itemName}</span><br />\n                          {/*<span key={Math.random()} style={{fontSize: \"1rem\", marginTop: \"0.5rem\"}}>{item.comment.toString().slice(1, -1)}</span>*/}\n                          {/* <span className=\"order-item-price\">{item.price}</span> */}\n                          {item.foodOptionsArray != null ? \n                            <ul className=\"order-item-toppings\">\n                              {item.foodOptionsArray.map((topping => \n                                <li key={Math.random()}>{topping}</li>  \n                              ))}\n                            </ul>\n                          : \"\" }\n                        </div>\n                      ))}\n                      <br />\n                      {/* <div className=\"order-tax-tip\">\n                        <span className=\"order-item-name\">Tax</span>\n                        <span className=\"order-item-price\">${(Math.round(15 * selectedOrder.items.reduce((a, b) => a + (b.price || 0), 0)) * 0.01).toFixed(2)}</span>\n                      </div>\n                      <div className=\"order-tax-tip\">\n                        <span className=\"order-item-name\">Tip</span>\n                        <span className=\"order-item-price\">${selectedOrder.tip}</span> {/*add back in to fixed \n                      </div>\n                      <br />\n                      <div className=\"order-total\">\n                        <span className=\"order-item-name\">Total</span>\n                        <span className=\"order-item-price\">${(selectedOrder.tip + (Math.round(15 * selectedOrder.items.reduce((a, b) => a + (b.price || 0), 0)) * 0.01) + selectedOrder.items.reduce((a, b) => a + (b.price || 0), 0)).toFixed(2)}</span>\n                      </div> */}\n                      <br />\n\n                      <hr />\n                      <span className=\"subheading\">Payment Confirmed <img className=\"checkmark\" src={grayCheckmark} /></span>\n                      <hr />\n              \n                      <div className=\"order-instructions\">\n                        <span className=\"heading\">Special Instructions</span>\n                        <hr className=\"short\" />\n                        <span>{selectedOrder.instructions.length > 0 ? \"\\\"\" + selectedOrder.instructions + \"\\\"\" : \"None\"}</span>\n                      </div>\n\n                      <button className=\"gray\">Report Issue</button>\n                      {orders.New.indexOf(selectedOrder) > -1 ? \n                        <button className=\"orange\" onClick={() => timerAdvanceOrder(selectedOrder, \"New\")}>Accept</button>\n                      : orders.Preparing.indexOf(selectedOrder) > -1 ? \n                        <button className=\"orange\">Accepted</button>\n                      // : orders.Ready.indexOf(selectedOrder) > -1 ? \n                      //   <button className=\"orange\">Completed</button>\n                      /*: orders.Cancelled.indexOf(selectedOrder) > -1 ?\n                      <button className=\"orange\" onClick={() => advanceOrder(selectedOrder, \"Cancelled\")}>Confirm</button>*/\n                      : \"\"}\n                    </div>\n                  </div>\n                  </div>\n              : \"\"}\n            </div>\n          </div>\n        :\n          <header>\n            <img className=\"portal-empty-image\" src={bubbleIcon} />\n            <span className=\"subheading\">You have no active orders.</span>\n            <b>Orders placed through the Toppings app today <br /> will appear here.</b>\n          </header>\n        }\n      </div>\n    }\n    </article>\n  );\n}\n\nexport default PortalOrders;","/home/zhao/src/toppings-vendor/src/pages/PortalMenu.js",["173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223"],"/home/zhao/src/toppings-vendor/src/pages/PortalTermsService.js",["224","225","226"],"import React, { useState, useEffect, useRef } from 'react';\n\nfunction PortalTermsService(props) {\n  return (\n    <article className=\"portal-terms-container\">\n      <header>\n        <span className=\"heading\">Terms of Service</span>\n      </header>\n\n      <div className=\"content\">\n        <div className=\"terms-of-service-container\">\n          <p><b>BEFORE YOU USE THE TOPPINGS MARKETPLACE, CAVIAR MARKETPLACE, AND/OR TOPPINGS PORTAL (\"PLATFORM\") PLEASE READ THESE TERMS CAREFULLY. BY EXECUTING THE SIGN-UP SHEET WITH TOPPINGS OR USING THE PLATFORM, YOU, ANY ENTITIES THAT YOU REPRESENT AND ALL OF YOUR PARTICIPATING STORE LOCATIONS (\"YOU\" OR \"MERCHANT\") AGREE TO BE BOUND BY THESE TERMS IN ADDITION TO THE TERMS ON YOUR SIGN-UP SHEET.\nSECTION 19 OF THIS AGREEMENT CONTAINS PROVISIONS THAT GOVERN HOW CLAIMS THAT YOU AND WE HAVE AGAINST EACH OTHER ARE RESOLVED, INCLUDING, WITHOUT LIMITATION, ANY CLAIMS THAT AROSE OR WERE ASSERTED BEFORE THE EFFECTIVE DATE OF THIS AGREEMENT. IN PARTICULAR, SECTION 19 SETS FORTH OUR ARBITRATION AGREEMENT WHICH WILL, WITH LIMITED EXCEPTIONS, REQUIRE DISPUTES BETWEEN US TO BE SUBMITTED TO BINDING AND FINAL ARBITRATION. UNLESS YOU OPT OUT OF THE ARBITRATION AGREEMENT: (1) YOU WILL ONLY BE PERMITTED TO PURSUE CLAIMS AND SEEK RELIEF AGAINST US ON AN INDIVIDUAL BASIS, NOT AS A PLAINTIFF OR CLASS MEMBER IN ANY CLASS OR REPRESENTATIVE ACTION OR PROCEEDING; AND (2) YOU ARE WAIVING YOUR RIGHT TO SEEK RELIEF IN A COURT OF LAW AND TO HAVE A JURY TRIAL ON YOUR CLAIMS. THE ARBITRATION AGREEMENT COULD AFFECT YOUR RIGHT TO PARTICIPATE IN PENDING PROPOSED CLASS ACTION LITIGATION. PLEASE SEE SECTION 19 FOR MORE INFORMATION REGARDING THIS ARBITRATION AGREEMENT, THE POSSIBLE EFFECTS OF THIS ARBITRATION AGREEMENT, AND HOW TO OPT OUT OF THE ARBITRATION AGREEMENT.\n</b></p>\n          <ol>\n            <li><b>Definitions.</b>\n              <ol type=\"a\">\n                <li>“Topper” means independent third-party delivery contractor.</li>\n                <li>“Delivery API” means the Toppings application programming interface (API) that allows the Merchant to exchange information with Toppings.</li>\n                <li>“Toppings Data” shall mean any information that Toppings provides or makes accessible to Merchant through the Toppings Platform, including without limitation Personal Information.</li>\n                <li>“Customer” means the customer who places an order for Merchant Products through the Toppings Platform or Toppings Portal.</li>\n                <li>“Toppings Marketplace” means Toppings’ proprietary online communication platform where Customers can view and search for the menus of Merchants and/or place an order for Merchant Products via the Toppings website or mobile application for delivery by a Topper to the Customer or for pickup by Customer.</li>\n                <li>“Toppings Platform” means Toppings Marketplace or Toppings App.</li>\n                <li>“Toppings Portal” means the platform that enables delivery fulfillment for orders placed directly with the Merchant by the Customer.</li>\n                <li>“Toppings Services” means Toppings Platform and, Toppings Portal, as applicable.</li>\n                <li>“Portal Orders” means orders placed by Merchant for delivery fulfilment by Toppings.</li>\n                <li>“Portal Term” means the term of the agreement between Toppings and Merchant for Toppings Portal.</li>\n                <li>“Marketplace Orders” means orders for Merchant Products through the Toppings Platform from Customers for delivery by Toppers.</li>\n                <li>“Merchant” means the restaurant or other entity that has agreed to participate in the Toppings Services.</li>\n                <li>\"Merchant Portal\" is an online website, accessible at https:toppingsapp.com through which Merchant may and regularly should review and confirm its transactions, fees and charges and account on the Platform.</li>\n                <li>“Merchant Products” includes all products offered for take-out or delivery orders at Merchant Stores.</li>\n                <li>“Merchant Stores” means the Merchant restaurant locations that participate in the Toppings Services and includes: (i) Merchant Stores owned and operated by Merchant or its affiliates, and/or (ii) Merchant Stores owned and operated by Franchisees of Merchant or its affiliates.</li>\n                <li>“Marketplace Term” means the term of the agreement between Toppings and Merchant for the Toppings Platform.</li>\n                <li>“Order” means a Marketplace Order or a Portal Order, as applicable.</li>\n                <li>“Order Equipment” means and includes any equipment reasonably required by Toppings for Merchant to receive and process Orders, including, without limitation, a tablet, fax machine, or other automated, electronic means of receiving Orders.</li>\n                <li>“Personal Information” shall mean any information exchanged under this Agreement that (i) identifies or can be used to identify an individual (including without limitation, names, telephone numbers, addresses, signatures, email addresses or other unique identifiers); or (ii) that can reasonably be used to authenticate an individual (including without limitation, name, contact information, precise location information, access credentials, persistent identifiers and any information that may be considered ‘personal data’ or ‘personal information’ under applicable law).</li>\n                <li>“Commission Rate” means the commission fees collected by Toppings in exchange for promoting and featuring the Merchant and Merchant Store(s) on the Toppings Platform, which is charged as a percentage of revenues transacted on the Toppings Platform.</li>\n                <li>“Schedule for Later Order” shall mean an Order to be fulfilled at a particular time later in the same day or at a later date.</li>\n                <li>“Terms” means the provisions herein.</li>\n                <li>“Third Party Platform” means a technology interface, such as a middleware technology platform, other than the online order form and the Delivery API that enables Merchant to request delivery fulfillment and provide information necessary to enable such delivery fulfillment.</li>\n              </ol>\n            </li>\n            <li><b>The Parties' Relationship.</b> Toppings provides an online marketplace platform using web-based technology that connects Merchants, independent delivery contractors (\"Toppers\") and Customers (\"Platform\"), as described in these Terms for Toppings Platform and Toppings Portal. Toppings is not a merchant, seller of goods, or delivery service; it is an online connection platform. Merchant and Toppings agree they are independent businesses whose relationship is governed by the Sign-Up Sheet and these Terms. Nothing in the Parties' agreements, relationship or transactions shall create or be construed as creating an agency, partnership, fiduciary or joint venture relationship between Toppings and Merchant (or Merchant's employees, representatives or locations), Toppings and Topper, or Toppings and Customers. Except as expressly set forth in the Sign-Up Sheet and these Terms, each Party shall be responsible for its own expenses, profits and losses.</li>\n            <li><b>Toppings Platform Core Responsibilities.</b> . For Merchants that have agreed to participate in the Toppings Platform, Toppings and Merchant shall have the following responsibilities during the Marketplace Term:\n              <ol type=\"a\">\n                <li>Toppings Core Responsibilities. Toppings will, in a timely manner:\n                  <ol type=\"i\">\n                    <li>Display Merchant’s logo; a listing of the Merchant Stores; and a menu of Merchant Products on the Toppings Platform;</li>\n                    <li>Accept Marketplace Orders from Customers;</li>\n                    <li>Forward each Marketplace Order to the relevant Merchant Store; and</li>\n                    <li>Forward each Marketplace Order to a Topper, so that the Topper can pick up the applicable Merchant Product(s) from the Merchant Store to deliver to the Customer.</li>\n                    <li>Pay the Merchant in accord with the Parties' agreements, deduct the applicable Commission Rate, marketing fees (for identifiable orders), subscription fees,  Activation Fees, and any other fees (in each case, as may be adjusted by Toppings as required by any applicable statute, regulation, executive order, or other legal requirement that is either temporary or permanent in nature).</li>\n                  </ol>\n                </li>\n                <li>Merchant Core Responsibilities. Merchant will, in a timely manner:\n                <ol type=\"i\">\n                    <li>Provide Toppings with the Merchant’s in-store or take-out menu, including the price of each item on such menu;</li>\n                    <li>Monitor Merchant’s menu and store information on the Toppings Platform, promptly make updates via the Merchant Portal to reflect the most up-to-date products, pricing and other information or immediately notify Toppings of any errors or changes in writing;</li>\n                    <li>Accept all Marketplace Orders placed by Toppings from Merchant’s then-current menu;</li>\n                    <li>Confirm all Marketplace Orders from Toppings;</li>\n                    <li>Prepare the Merchant Products for each Marketplace Order for pickup by a Topper at the designated time;</li>\n                    <li>Process Marketplace Orders in the order in which they are received;</li>\n                    <li>Notify Toppings of any changes to the pricing, availability, description, or other characteristics of the Merchant Products;</li>\n                    <li>Notify Toppings of its days and hours of operation, and remain open for business on Toppings the same days and hours of operation as Merchant’s in-store business; notify Toppings of any changes to Merchant’s hours of operations on holidays; and notify Toppings if Merchant closes earlier than Merchant’s standard hours of operation or plans to close earlier than Merchant’s standard hours of operation;</li>\n                    <li>Notify all Merchant store staff members of the relationship with Toppings immediately upon execution of this Agreement;</li>\n                    <li>Provide the same utensils, napkins, bags and other materials that Merchant would typically provide in a standard take-out or delivery order, subject to Section 15(3)(i);</li>\n                    <li>On an ongoing basis, review and confirm the transactions, fees and charges on orders via the Merchant Portal, and promptly communicate to Toppings any inaccuracies; and</li>\n                    <li>If Toppings collects and passes tips from Customers to Merchant, Merchant will distribute such tips in accordance with applicable law, including but not limited to tip pooling laws.</li>\n                  </ol>\n                </li>\n              </ol>\n            </li>\n            <li><b>Toppings Portal Core Responsibilities.</b> For Merchants that have agreed to participate in Toppings Portal, Toppings and Merchant shall have the following responsibilities during the Portal Term:\n              <ol type=\"a\">\n                <li>Toppings Core Responsibilities. Toppings will, in a timely manner:\n                  <ol type=\"i\">\n                    <li>Provide Merchant with an online order form or access to the Delivery API to submit requests for deliveries, or receive information through a Third Party Platform;</li>\n                    <li>Forward requests to a Topper, so that the Topper can pick up the applicable Merchant Product(s) from the Merchant Store to deliver to the Customer.</li>\n                  </ol>\n                </li>\n                <li>Merchant Core Responsibilities. Merchant will:\n                  <ol type=\"i\">\n                    <li>Via the online order form, the Delivery API, or a Third Party Platform, provide information requested by Toppings including the Customer’s address, contact information, and any special instructions required for delivery; </li>\n                    <li>Accept and collect payments from Customers for their respective orders;</li>\n                    <li>Notify Customers prior to placing a Portal Order that their telephone numbers and other personal contact information will be shared with Toppings to enable deliveries to be made by Toppers and, in connection with the applicable deliveries, request the Customer’s consent to receive delivery status updates by e-mail, text messages, and telephone calls from Toppings and Toppers;</li>\n                    <li>Notify Toppings if a Customer has not consented to receive delivery updates or has placed any restrictions on types of delivery updates such Customer consents to receive (e.g., no texts). Merchant hereby consents to receiving text messages and email confirmations from Toppings providing status updates and delivery confirmations in connection with each delivery.</li>\n                    <li>On an ongoing basis, review and confirm the transactions, fees and charges on invoices and via the Merchant Portal, and promptly communicate to Toppings any inaccuracies.</li>\n                  </ol>\n                </li>\n                <li>Portal Operating Procedures.\n                  <ol type=\"i\">\n                    <li>Order Placement. Merchant agrees to submit a Portal Order for delivery fulfillment at least twenty-four (24) hours in advance of scheduled delivery, and in no event less than two (2) hours in advance of scheduled pick-up. Exceptions will be mutually agreed to by the Parties.</li>\n                    <li>Hours of Operation. The pickup and dropoff of deliveries will be scheduled to take place during Toppings’s standard hours of availability, as may be updated from time to time in Toppings’s sole discretion. Merchant agrees to abide by the following standard procedures: (i) to notify Toppings of any changes to its hours of operations on federal holidays with reasonable advance notice; and (ii) to notify Toppings with reasonable advance notice if a Merchant location closes earlier than standard hours of operation or plans to close earlier than standard hours of operation.</li>\n                    <li>Delivery Radii. Toppings will only accept Portal Orders to be delivered within a certain preset delivery radius based on either the Merchant or the End-Customer location, which will be communicated to Merchant.</li>\n                    <li>Cancellations. Fees owed for any Portal Orders cancelled within twenty-four (24) hours of a Schedule for Later delivery are non-refundable. If provided more than two (2) hours notice, but less than twenty-four (24) hours notice, Toppings will make reasonable efforts to accommodate changes. </li>\n                    <li>Notification. Merchant agrees to notify all staff members in Merchant Stores of Merchant’s relationship with Toppings prior to submitting any delivery requests to Toppings.</li>\n                  </ol>\n                </li>\n              </ol>\n            </li>\n            <li><b>Refunds and Re-Orders.</b> Refunds and re-orders will be addressed as follows:\n              <ol type=\"a\">\n                <li>Marketplace Order Refunds. In the event that Toppings, in its sole reasonable discretion, has to issue a refund, credit or re-order on an Customer’s Order, Merchant will prepare the food to the same specifications as the original Order (in the case of a re-order) and bear the full cost of that refund, credit or re-order, as applicable, unless the refund, credit or re-order is due to the fault of the Topper or Toppings.</li>\n                <li>Portal Order Refunds. Merchant acknowledges and agrees that Toppings shall be responsible only for facilitating the delivery of Merchant Product(s) to Customers. Merchant shall be solely responsible for any customer complaints regarding Merchant Product(s), including without limitation, complaints regarding the nature, quality, content, number, or packaging of Merchant Product(s). Merchant agrees not to refer any Customer complaints directly to Toppings. Any complaints regarding the timeliness or quality of a Topper’s delivery service shall be reported by Merchant to Toppings. If the completion of a Portal Order is more than 45 minutes late and due to fault of Toppings, Toppings will reimburse Merchant for all or a portion of the delivery cost of the applicable Portal Order. If Merchant elects to refund a Customer for any reason, such election shall not obligate Toppings to provide a corresponding reimbursement to Merchant. In the event that a Merchant Product has been visibly damaged with proof from Customer, Toppings may reimburse Merchant for all or a portion of the order subtotal. For the purposes of this agreement, “Merchant Product” is the actual food or beverage item, not the packaging that contains the Merchant Product. In no event shall Toppings be obligated to issue any refunds directly to Customers.</li>\n              </ol>\n            </li>\n            <li><b>Order Equipment. </b>With respect to the Toppings Platform, Merchant will install any equipment reasonably required by Toppings for Merchant to receive and process Orders (including, without limitation, a tablet, fax machine, or other automated, electronic means of receiving Orders) (“Order Equipment”). If any Order Equipment is provided by Toppings, Merchant will pay Toppings an Order Equipment Fee, as set forth in the Sign-Up Sheet, in exchange for the right to use the Order Equipment to access the Toppings Platform in order to receive, process, and accept Marketplace Orders. Any Order Equipment provided by Toppings will remain Toppings’s sole property and may be used solely for purposes related to fulfilling Merchant’s responsibilities under this Agreement. Merchant will inspect all hardware, and shall notify Toppings in writing if any Order Equipment is missing or was damaged as soon as practicable after discovering such damage. Toppings may restrict or rescind Merchant’s right to use the Toppings Platform at any time. Merchant will be responsible for any damage to or loss of any Order Equipment provided by Toppings (excluding ordinary wear and tear), which will be promptly reimbursed by Merchant (at the replacement cost thereof). Toppings may recover the replacement cost of damaged or lost Order Equipment by deducting such amount from weekly payments. Merchant agrees to pay all subscription fees and deposits reasonably charged by Toppings for Order Equipment, and agrees Toppings may deduct such fees and deposits from amounts payable by Toppings to Merchant.</li>\n            <li><b>Payment, Fees, Title and Taxes. </b>Payment, fees, and taxes shall be addressed as follows:\n              <ol type=\"a\">\n                <li>Toppings Platform. Toppings will pay for Marketplace Orders fulfilled by Merchant each week on a consistent day of the week, subject to change with no less than 10 days’ notice to Merchants by email or service notification. Toppings shall be entitled to deduct from such payments Toppings’s Commission Rate, marketing fees (for identifiable orders), Activation Fees, subscription fees, and any other fees which Toppings may notify you regarding with at least 7 days advance written notice. Merchant shall be responsible for all taxes, duties, and other governmental charges on the sale of Merchant Products and for remitting such taxes, duties, and other governmental charges to the appropriate authorities. In the event that Merchant raises the price for a menu item, Toppings shall not be required to remit the higher price to the Merchant until 3 business days after the Merchant first provides notice to  Toppings of such pricing change.</li>\n                <li>Toppings Portal. Merchant will pay Toppings a fee per Portal Order as mutually agreed. Merchant shall be responsible for all taxes, duties, and other governmental charges on the sale of Merchant Products and for remitting such taxes, duties, and other governmental charges to the appropriate authorities. As agreed by the parties, payment of all fees under this Section 8(b) shall be as follows: (i) Merchant shall pay the fees by credit card or ACH at the time of ordering, or (ii) Toppings shall invoice Merchant on a monthly basis and Merchant shall pay the invoice within seven (7) days of receipt of such invoice. If any fee is not paid in full by the due date, Toppings may assess interest on the unpaid amount for the period beginning on the Payment Date and ending on the date that the amount is paid in full. The amount of interest to be paid shall not exceed the maximum rate under applicable law.</li>\n                <li>To the extent that a third party provider provides services to Merchant via the Platform (for example, a middleware provider) and charges fees to Toppings, Toppings may pass through such third party’s fees to Merchant.</li>\n                <li>In some jurisdictions in the United States, Toppings may be required to collect sales, use, or similar taxes from the Customer and remit such taxes directly to the tax authority. In such jurisdictions, Toppings will inform Merchant that Toppings will remit Collected Taxes to the tax authority and Toppings will be relieved of any responsibility to remit such Collected Taxes to Merchant.</li>\n                <li>Merchant agrees, on an ongoing basis, to review and confirm its transactions, fees and charges on orders and invoices and via the Merchant Portal, and to promptly communicate to Toppings in writing any claimed inaccuracies, so that Toppings has the prompt opportunity to address and resolve any issues and so such issues do not persist, which Toppings and Merchant agree is in the best interests of both parties and their commercial relationship. Merchant agrees to communicate to Toppings any disagreement, non-conformity or any issue with any transaction, fee, charge or order within 60 days of the transaction, fee or order. Merchant shall be deemed to have acquiesced in and ratified, and to have waived any claim or objection regarding, each transaction, fee, charge and order if Merchant does not communicate a written claim or objection to Toppings regarding such transaction, fee, charge or order within such 60-day period.</li>\n                <li>Merchant agrees that Merchant holds title to the goods or products that Merchant provides through the Platform until the goods are picked up from Merchant, and that title passes from the Merchant to the Customer upon pickup at the Merchant’s location. Merchant agrees that neither the Topper nor Toppings holds title to or acquires any ownership interest in any goods or products that Merchant prepares or provides through the Platform.</li>\n              </ol>\n            </li>\n            <li><b>Payment Processing.</b> Payment processing services for Merchants on the Toppings Platform are provided by Stripe and are subject to the Stripe Connected Account Agreement, which includes the Stripe Services Agreement. By agreeing to these Terms, Merchant agrees to be bound by the Stripe Connected Account Agreement and the Stripe Services Agreement, as the same may be modified by Stripe from time to time. As a condition of Toppings enabling payment processing services through Stripe, Merchant agrees to provide Toppings accurate and complete information about Merchant’s representative and its business, and Merchant authorizes Toppings to share it and transaction information related to Merchant’s use of the payment processing services provided by Stripe. Stripe has been audited by a PCI-certified auditor and is certified to PCI Service Provider Level 1.</li>\n            <li><b>Merchant Content and Trademark; Photographs of Menu Items.</b>\n              <ol type=\"a\">\n                <li>During the Marketplace Term Merchant grants to Toppings a royalty-free, non-exclusive, limited, revocable, non-transferable, non-sublicensable right and license to use and display the Merchant Content in the provision of services to Merchant, including listing Merchant as a merchant on the Toppings Platform, referencing Merchant as a Toppings partner, and to promote Toppings’s products and services. As used herein, “Merchant Content” includes, without limitation, menus, photographs (either provided by Merchant or on Merchant’s website), trademarks, logos and other materials provided by Merchant to Toppings.</li>\n                <li>If photographs of Merchant’s menu items are not available or if they do not meet Toppings’s requirements, as reasonably determined by Toppings, then Merchant consents to Toppings (i) engaging a professional photographer to take photographs of Merchant’s menu items (ii) enhancing the quality of Merchant’s existing photographs or (iii) using stock photos of the menu item, and displaying such photographs on the Toppings Platform as representations of Merchant’s menu items; provided that Merchant may contact Toppings support to have such photographs removed from the Merchant’s store listing and, in such event, Toppings will comply in a timely manner.</li>\n              </ol>\n            </li>\n            <li><b>Confidential Information.</b>\n              <ol type=\"a\">\n                <li>The term “Confidential Information” shall mean any confidential or proprietary business, technical or financial information or materials of a party (“Disclosing Party”) provided to the other party (“Receiving Party”) in connection with this Agreement, whether orally or in physical form, and shall include the terms of this Agreement. Without limiting the foregoing, Toppings Data is the Confidential Information of Toppings.</li>\n                <li>Confidential Information does not include information that: (i) was rightfully known to the Receiving Party without restriction on use or disclosure prior to such information's being disclosed to the Receiving Party in connection with this Agreement; (ii) was or becomes public domain other than by the fault of the Receiving Party; (iii) was or is received by the Receiving Party on a non-confidential basis from a third party that, to the Receiving Party's knowledge, was not at the time under any obligation to maintain its confidentiality; or (iv) the Receiving Party can demonstrate by documentary records was independently developed by the Receiving Party without access to, use of or reference to any Confidential Information.</li>\n                <li>The Receiving Party shall: (i) not access or use Confidential Information other than as necessary to exercise its rights or perform its obligations in accordance with this Agreement; (ii) except subject to its compliance with Section 11(d), not disclose or permit access to Confidential Information other than to its or any of its employees, officers, directors, consultants, agents, independent contractors, service providers, subcontractors and legal advisors (“Representatives”) who need to know such Confidential Information for purposes of the Receiving Party's exercise of its rights or performance of its obligations under and in accordance with this Agreement, and prior to any such disclosure are bound by written confidentiality and restricted use obligations at least as protective of the Confidential Information as the terms set forth in this Section; and (iii) safeguard the Confidential Information from unauthorized use, access or disclosure using at least the degree of care it uses to protect its most/similarly sensitive information and in no event less than a reasonable degree of care.</li>\n                <li>If the Receiving Party is compelled by applicable Law to disclose any Confidential Information then, to the extent permitted by applicable Law, the Receiving Party shall promptly notify the Disclosing Party in writing of such requirement so that the Disclosing Party can seek a protective order or other remedy or waive its rights under Section 11(c) and provide reasonable assistance to the Disclosing Party, at the Disclosing Party's sole expense, in opposing or seeking protective limitations on disclosure.</li>\n              </ol>\n            </li>\n            <li><b>Data Privacy and Security.</b>\n              <ol type=\"a\">\n                <li>General. Merchant agrees not to access, collect, store, retain, transfer, use, disclose, or otherwise process in any manner Toppings Data, including without limitation Personal Information, except as required to perform under this Agreement. Merchant shall keep Toppings Data secure from unauthorized access and maintain the accuracy and integrity of Toppings Data in Merchant’s custody or control by using appropriate organizational, physical and technical safeguards. If Merchant becomes aware of any unauthorized access to Toppings Data, Merchant will immediately notify Toppings, consult and cooperate with investigations and potentially required notices, and provide any information reasonably requested by Toppings. Merchant agrees to implement and use security procedures, protocols or access credentials as reasonably requested by Toppings and will be responsible for damages resulting from Merchant’s failure to comply. Merchant will not allow any third party to use the Toppings Platform and will be responsible for damages resulting from sharing Merchant’s login credentials with unauthorized third parties or otherwise permitting unauthorized access to Merchant’s account. Merchants may not allow any third party to copy, modify, rent, lease, sell, distribute, reverse engineer, or otherwise attempt to gain access to the source code of the Toppings Platform; damage, destroy or impede the services provided through the Toppings Platform; transmit injurious code; or bypass or breach any security protection on the Toppings Platform.</li>\n                <li>Delivery API. During the Term, Toppings grants to Merchant a non-exclusive, royalty-free, non-assignable, non-transferable, non-sublicensable, revocable, limited, fully paid-up license to access the Delivery API solely to transmit information to facilitate the Toppings Portal services. Merchant will not and will not permit or authorize any third party to (i) sell, license, rent, resell, lease, assign (except as permitted herein), transfer, or otherwise commercially exploit the Delivery API; (ii) circumvent or disable any security or other technological features or measures of, or otherwise gain or attempt to gain unauthorized access to the Delivery API; (iii) reverse engineer, dissemble, decompile, or otherwise attempt to derive the source code or the underlying ideas, algorithms, structure, or organization of the Delivery API; (iv) use the Delivery API in any manner or for any purpose that violates any law or regulation; and (v) use the Delivery API for a reason other than as specifically provided or intended under this Agreement. Each Party agrees not to perform any action with the intent of introducing to the other Party’s systems, products, or services (including the Delivery API) any viruses, worms, defect, Trojan horses, malware, or any items of a destructive nature.</li>\n              </ol>\n            </li>\n            <li><b>Termination.</b> Merchant may terminate this Agreement for any reason at any time upon seven (7) days prior written notice. Toppings may terminate this Agreement or any promotion under this Agreement for any reason at any time upon written notice. Email shall suffice for written notice. Neither Merchant nor Toppings will be required to pay any fee in connection with a termination by either party, or be liable to the other as a result of termination of this Agreement for any damages, for the loss of goodwill, prospective profits or anticipated income, or for any expenditures, investments, leases or commitments made by either Merchant or Toppings.</li>\n            <li><b>Modifications.</b> Toppings reserves the right, at its sole discretion, to change, suspend, or discontinue the Platform (including without limitation, the availability of any feature or content) at any time. Toppings may, at its sole discretion, remove Merchant Products or Stores from the Toppings Platform if Toppings determines that such Merchant Product or Merchant Store could subject Toppings to undue regulatory risk, health and safety risk, or other liability. Toppings also may revise these Terms from time to time. The changes will not be retroactive, and the most current version of the terms will be at FIGURE DIS OUT We will notify Merchants of material revisions via a service notification or an email to the email address associated with your account. By continuing to access or use the Services after those revisions become effective, you agree to be bound by the revised Terms.</li>\n            <li><b>Representations and Warranties; Additional Responsibilities; Warranty Disclaimer.</b>\n              <ol>\n                <li>Each party represents and warrants that it has the full right, power, and authority to enter into and perform its obligations under this Agreement without breaching any obligation to any third party.</li>\n                <li>Each party represents and warrants that it will comply with all applicable laws and regulations in its performance of this Agreement, including without limitation (i) all applicable data protection and privacy laws, and (ii) all applicable laws related to third party intellectual property and other proprietary rights.</li>\n                <li>Merchant further represents, warrants and agrees that (i) it will comply with all applicable laws, rules, standards and regulations relating to licenses, health (including Proposition 65 in California), food packaging and accessory items (including but not limited to foodware, plasticware, and other disposable restaurant supplies), and food safety and sanitation, (ii) it has informed Toppings of any required consumer-facing warnings, charges, opt-in requirements, and instructions associated with Merchant Product(s) and it will inform Toppings of any such warnings, charges, opt-ins, and instructions that become required in the future, (iii) it will disclose common allergens in any Merchant’s menu items listed on the Toppings Platform, (iv) it will only list menu items or products for sale, product descriptions, and prices on the Toppings Platform,  (v) it will not include any age-restricted products (including but not limited to alcohol and tobacco) in Merchant’s menus on the Toppings Platform or request delivery of any age-restricted products through the Toppings Platform without first entering into a separate agreement with Toppings memorializing the promotion, sale and delivery of such products in compliance with the laws of the applicable state in which such products will be sold, (vi) it will not disclose any information related to a Topper or a Customer to a third party (except as required to comply with law or pursuant to a court order), (vii) it will comply with the guidelines Toppings publishes that govern any content Merchant posts on the Toppings Platform or Merchant Portal, and  (viii) it will comply with its obligations under Section 4(b)(iii) and 4(b)(iv) of this Agreement.</li>\n                <li>EXCEPT AS EXPRESSLY SET FORTH HEREIN, TO THE EXTENT PERMITTED BY APPLICABLE LAW, TOPPINGS HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EXPRESS, IMPLIED OR STATUTORY, REGARDING THE TOPPINGS PLATFORM, THE DELIVERY API, EQUIPMENT OR SERVICES, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES OF MERCHANTABILITY, TITLE, SATISFACTORY QUALITY OR RESULTS, OR FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. Merchant acknowledges that the operation of the Platform may from time to time encounter technical or other problems and may not necessarily continue uninterrupted or without technical or other errors and Toppings shall not be responsible to Merchant or others for any such interruptions, errors, or problems or an outright discontinuance of the Platform nor for any guarantee of results with respect to the Toppings services or Platform. Both Parties acknowledge that neither party has any expectation or has received any assurances for future business or that any investment by a party will be recovered or recouped or that such party will obtain any anticipated amount of profits by virtue of this Agreement.</li>\n              </ol>\n            </li>\n            <li><b>Indemnification.</b> Each party (the “Indemnifying Party”) will defend, indemnify, and hold harmless the other party, its subsidiaries and affiliates, and their respective officers, directors, shareholders, employees, and agents (the “Indemnified Party”) from and against any and all claims, damages, losses and expenses (including reasonable attorney’s fees) (collectively “Losses”) with respect to any third-party claims arising out of or related to: (i) any bodily injury (including death) or damage to tangible or real property to the extent caused by the Indemnifying Party’s personnel and, in the case of Toppings, Toppers (or, in the case of Merchant as the Indemnifying Party, caused by the Merchant Products); (ii) any claims that the Indemnifying Party breached its representations, warranties or covenants set forth in Section 11 and Section 12, and Section 15 of this Agreement; (iii) the violation of the intellectual property of the third party by the Indemnifying Party’s logos, trademarks, trade names, menus, documentation, or other intellectual property (collectively, “Materials”); or (iv) in the case of Merchant as the Indemnifying Party, Merchant’s failure to distribute tips as required by applicable law. In addition, Merchant will defend, indemnify and hold harmless Toppings from any and all Losses related to any violation or alleged violation of any applicable retail food or other health and safety code, rule, or regulation related to Merchant Product(s), except to the extent such Losses were caused directly by the gross negligence or willful misconduct of Toppings. In each case the Indemnified Party shall provide the Indemnifying Party with (a) prompt notice of any claims such that the Indemnifying Party is not prejudiced by any delay of such notification, (b) the option to assume sole control over defense and settlement of any claim, and (c) reasonable assistance in connection with such defense and settlement (at the Indemnifying Party’s expense). The Indemnified Party may participate in the defense or settlement of such a claim with counsel of its own choice and at its own expense; however, the Indemnifying Party shall not enter into any settlement agreement that imposes any obligation on the Indemnified Party without the Indemnified Party’s express prior written consent. Toppings assumes no liability, and shall have no liability, for any infringement claim pursuant to section 16(iii) above based on Merchant’s access to and/or use of the Toppings Platform following notice of such an infringement claim; any unauthorized modification of the Toppings Platform by Merchant; or Merchant’s combination of the Toppings Platform with third party programs, services, data, hardware, or other materials which otherwise would not result in such infringement claim.</li>\n            <li><b>Limitation of Liability. </b>EXCEPT WITH RESPECT TO DAMAGES ARISING FROM VIOLATIONS OF LAW OR WILFUL MISCONDUCT, UNPAID AMOUNTS OWED TO TOPPINGS BY MERCHANT IN EXCESS OF THE BELOW LIMIT, AND AMOUNTS PAYABLE TO THIRD PARTIES UNDER SECTION 16 (INDEMNIFICATION), TO THE EXTENT PERMITTED BY APPLICABLE LAW, (I) NEITHER PARTY WILL BE LIABLE TO THE OTHER UNDER THIS AGREEMENT, FOR INDIRECT, SPECIAL, PUNITIVE, OR CONSEQUENTIAL DAMAGES, OR FOR LOST PROFITS, LOST REVENUES, HARM TO GOODWILL, OR THE COSTS FOR PROCURING REPLACEMENT SERVICES, WHETHER BASED ON TORT, CONTRACT OR ANY OTHER LEGAL THEORY, AND WHETHER OR NOT SUCH PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES, AND (II) EACH PARTY’S MAXIMUM AGGREGATE LIABILITIES RELATED TO OR IN CONNECTION WITH THIS AGREEMENT SHALL NOT EXCEED THE TOTAL AMOUNT PAID OR PAYABLE BY ONE PARTY TO THE OTHER PARTY IN THE TWELVE (12) MONTH PERIOD IMMEDIATELY PRECEDING THE INCIDENT GIVING RISE TO THE LIABILITY. THE FOREGOING DISCLAIMER SHALL NOT APPLY TO THE EXTENT PROHIBITED BY LAW.</li>\n            <li><b>Insurance. </b>During the term of the Agreement and for one year after, each party will maintain adequate insurance in amounts not less than as required by law or that is common practice in such party’s business. Upon request, each party will provide the other with current evidence of coverage. Such insurance shall not be cancelled or materially reduced without thirty (30) days prior written notice. In no event shall the limits of any insurance policy be considered as limiting the liability of a party under this Agreement.</li>\n            <li><b>Dispute Resolution.</b> PLEASE READ THE FOLLOWING SECTION CAREFULLY. IT REQUIRES YOU TO ARBITRATE DISPUTES WITH TOPPINGS AND LIMITS THE MANNER IN WHICH YOU CAN SEEK RELIEF. THIS SECTION 19 OF THIS AGREEMENT SHALL BE REFERRED TO AS THE “ARBITRATION AGREEMENT”.\n              <ol>\n                <li><b>Scope of Arbitration Agreement.</b> Any dispute, controversy or claim arising out of, relating to or in connection with this contract, including the breach, termination or validity thereof, shall be finally resolved by binding arbitration, rather than in court, except that (1) you may assert claims in small claims court if your claims qualify, so long as the matter remains in such court and advances only on an individual (non-class, non-representative) basis; and (2) you or Toppings may seek injunctive relief in court for infringement or other misuse of intellectual property rights (such as trademarks, trade dress, domain names, trade secrets, copyrights, and patents). Toppings and Merchant agree that, because both are business entities that mutually benefit from streamlined and confidential resolution, this Arbitration Agreement shall apply to all disputes arising from or relating to the subject matter of this Agreement or the relationship between the parties and their personnel. In that regard, this Arbitration Agreement shall be binding upon and enforceable by not only the parties, but also their affiliates, and their owners, officers, directors, managers and employees. This Arbitration Agreement shall apply, without limitation, to all claims that arose or were asserted before the Effective Date of this Agreement. CASES HAVE BEEN FILED AGAINST TOPPINGS—AND OTHERS MAY BE FILED IN THE FUTURE—THAT ATTEMPT TO ASSERT CLASS ACTION CLAIMS, AND BY ACCEPTING THIS ARBITRATION AGREEMENT YOU ELECT NOT TO PARTICIPATE IN SUCH CASES. IF YOU AGREE TO ARBITRATION WITH TOPPINGS, YOU ARE AGREEING IN ADVANCE THAT YOU WILL NOT PARTICIPATE IN OR SEEK TO RECOVER MONETARY OR OTHER RELIEF IN ANY SUCH CLASS, COLLECTIVE, AND/OR REPRESENTATIVE LAWSUIT. INSTEAD, BY AGREEING TO ARBITRATION, YOU MAY BRING YOUR CLAIMS AGAINST TOPPINGS IN AN INDIVIDUAL ARBITRATION PROCEEDING. IF SUCCESSFUL ON SUCH CLAIMS, YOU COULD BE AWARDED MONEY OR OTHER RELIEF BY AN ARBITRATOR.</li>\n                <li><b>Informal Resolution. You and Toppings agree that good-faith informal efforts to resolve disputes often can result in a prompt, low-cost and mutually beneficial outcome. You and Toppings therefore agree that, before either you or Toppings demands arbitration against the other, we will personally meet and confer, via telephone or videoconference, in a good-faith effort to resolve informally any claim covered by this mutual Arbitration Agreement. If you are represented by counsel, your counsel may participate in the conference, but you shall also fully participate in the conference. The party initiating the claim must give notice to the other party in writing of its, his, or her intent to initiate an informal dispute resolution conference, which shall occur within 60 days after the other party receives such notice, unless an extension is mutually agreed upon by the parties. To notify Toppings that you intend to initiate an informal dispute resolution conference, email Merchant.Informal.Resolution@Toppings.com, providing your name, telephone number associated with your Toppings account (if any), the email address associated with your Toppings account, and a description of your claim. In the interval between the party receiving such notice and the informal dispute resolution conference, the parties shall be free to attempt to resolve the initiating party’s claims. Engaging in an informal dispute resolution conference is a requirement that must be fulfilled before commencing arbitration.  The statute of limitations and any filing fee deadlines shall be tolled while the parties engage in the informal dispute resolution process required by this paragraph.</b></li>\n                <li><b>Arbitration Rules and Forum.</b> This Arbitration Agreement is governed by the Federal Arbitration Act in all respects. If for whatever reason the rules and procedures of the Federal Arbitration Act cannot apply, the state law governing arbitration agreements in the state in which you reside shall apply. Before a party may begin an arbitration proceeding, that party must send notice of an intent to initiate arbitration and certifying completion of the informal dispute resolution conference pursuant to paragraph 19(2). If this notice is being sent to Toppings, it must be sent by email to the counsel who represented Toppings in the informal dispute resolution process, or if there was no such counsel then by mail to General Counsel, at 5190 Ivy Nole Cumming, GA 30040. The arbitration will be conducted by JAMS under its rules and pursuant to the terms of this Agreement, but in the event of a conflict between the two, the provisions of this Arbitration Agreement shall supersede any and all conflicting arbitration administrator’s rules or procedures. Arbitration demands filed with JAMS must include (1) the name, telephone number, mailing address, and e-mail address of the party seeking arbitration; (2) a statement of the legal claims being asserted and the factual bases of those claims; (3) a description of the remedy sought and an accurate, good-faith calculation of the amount in controversy, enumerated in United States Dollars (any request for injunctive relief or attorneys’ fees shall not count toward the calculation of the amount in controversy unless such injunctive relief seeks the payment of money); and (4) the signature of the party seeking arbitration. Disputes involving claims and counterclaims under $250,000, not inclusive of attorneys’ fees and interest, shall be subject to JAMS’s most current version of the Streamlined Arbitration Rules and procedures available at http://www.jamsadr.com/rules-streamlined-arbitration/; all other claims shall be subject to JAMS’s most current version of the Comprehensive Arbitration Rules and Procedures, available at http://www.jamsadr.com/rules-comprehensive-arbitration/. JAMS’s rules are also available at www.jamsadr.com (under the Rules/Clauses tab) or by calling JAMS at 800-352-5267. Payment of all filing, administration, and arbitration fees will be governed by JAMS’s rules. If JAMS is not available to arbitrate, the parties will select an alternative arbitral forum. You may choose to have the arbitration conducted by telephone, video conference, or in person in the country where you live or at another mutually agreed location.</li>\n                <li><b>Arbitrator Powers.</b> The arbitrator, and not any federal, state, or local court or agency, shall have exclusive authority to resolve any dispute relating to the interpretation, applicability, enforceability or formation of this Arbitration Agreement including, but not limited to any claim that all or any part of this Arbitration Agreement is void or voidable. All disputes regarding the payment of arbitrator or arbitration-organization fees including the timing of such payments and remedies for nonpayment, shall be determined exclusively by an arbitrator, and not by any court. The arbitration will decide the rights and liabilities, if any, of you and Toppings. The arbitration proceeding will not be consolidated with any other matters or joined with any other proceedings or parties. The arbitrator will have the authority to grant motions dispositive of all or part of any claim or dispute. The arbitrator will have the authority to award monetary damages and to grant any non-monetary remedy or relief available to an individual under applicable law, the arbitral forum’s rules, and this Agreement (including this Arbitration Agreement). The arbitrator will issue a written statement of decision describing the essential findings and conclusions on which any award (or decision not to render an award) is based, including the calculation of any damages awarded. The arbitrator shall follow the applicable law. The arbitrator has the same authority to award relief on an individual basis that a judge in a court of law would have. The arbitrator’s decision is final and binding on you and Toppings.</li>\n                <li><b>Waiver of Jury Trial.</b>YOU AND TOPPINGS WAIVE ANY CONSTITUTIONAL AND STATUTORY RIGHTS TO SUE IN COURT AND RECEIVE A JUDGE OR JURY TRIAL. You and Toppings are instead electing to have claims and disputes resolved by arbitration, except as specified in Section 19(1) above. There is no judge or jury in arbitration, and court review of an arbitration award is limited.</li>\n                <li><b>Waiver of Class or Consolidated Actions; Severability.</b> YOU AND TOPPINGS AGREE TO WAIVE ANY RIGHT TO RESOLVE CLAIMS WITHIN THE SCOPE OF THIS ARBITRATION AGREEMENT ON A CLASS, COLLECTIVE, OR REPRESENTATIVE BASIS. ALL CLAIMS AND DISPUTES WITHIN THE SCOPE OF THIS ARBITRATION AGREEMENT MUST BE ARBITRATED ON AN INDIVIDUAL BASIS AND NOT ON A CLASS BASIS. CLAIMS OF MORE THAN ONE MERCHANT CANNOT BE ARBITRATED OR LITIGATED JOINTLY OR CONSOLIDATED WITH THOSE OF ANY OTHER CUSTOMER OR USER. If, however, this waiver of class or consolidated actions is deemed invalid or unenforceable with respect to a particular claim or dispute, neither you nor Toppings is entitled to arbitration of such claim or dispute. Instead, all such claims and disputes will then be resolved in a court as set forth in Section 20, and all other provisions of this Section 19 (Dispute Resolution) shall remain in force. If any provision of this Section 19 is adjudged to be void or otherwise unenforceable, in whole or in part, the void or unenforceable provision shall be severed and such adjudication shall not affect the validity of the remainder of this Section 19. Nothing in this provision shall prevent you or Toppings from participating in a class-wide settlement of claims.</li>\n                <li><b>Opt Out.</b> Toppings’s updates to these Terms of Service do not provide a new opportunity to opt out of the Arbitration Agreement if you had previously agreed to a version of Toppings’s Terms of Service and did not validly opt out of arbitration. Toppings will continue to honor the valid opt outs of merchants who validly opted out of the Arbitration Agreement in a prior version of the Terms of Service. If you create a Toppings account for the first time on or after December 9, 2020, you may opt out of this Arbitration Agreement. If you do so, neither you nor Toppings can force the other to arbitrate as a result of this Agreement. To opt out, you must notify Toppings in writing of your intention to opt out by sending a letter, by First Class Mail, to Toppings, Inc., 5190 Ivy Nole Cumming GA 30040. Any attempt to opt out by email will be ineffective. To be effective, your opt-out notice must be postmarked no later than 30 days after your first order on the Platform. Your notice must include your name and address, your Toppings username (if any), the email address you used to set up your Toppings account (if you have one), and a CLEAR statement that you want to opt out of this Arbitration Agreement. The letter may opt out, at most, only one merchant, and letters that purport to opt out multiple merchants will not be effective as to any. No merchant (or his or her agent or representative) may effectuate an opt out on behalf of other persons. If you opt out of this Arbitration Agreement, all other parts of this Agreement will continue to apply to you. Opting out of this Arbitration Agreement has no effect on any other arbitration agreements that you may have entered into with us or may enter into in the future with us.</li>\n                <li><b>Survival. This Arbitration Agreement will survive any termination of your relationship with Toppings.</b></li>\n                <li><b>Modification. Notwithstanding any provision in the Agreement to the contrary, we agree that if Toppings makes any future material change to this Arbitration Agreement, it will not apply to any individual claim(s) that you had already provided notice of to the Company.</b></li>\n              </ol>\n            </li>\n            <li><b>Litigation Class Action Waiver. To the extent allowed by applicable law, separate and apart from the Mutual Arbitration Provision found in Section 19, Merchant agrees that any proceeding to litigate in court any dispute arising out of or relating to this Agreement, whether because Merchant opted out of the Arbitration Provision or any other reason, will be conducted solely on an individual basis, and Merchant agrees not to seek to have any controversy, claim or dispute heard as a class action, a representative action, a collective action, a private attorney-general action, or in any proceeding in which Merchant acts or proposes to act in a representative capacity (“Litigation Class Action Waiver”). Merchant further agrees that no proceeding will be joined, consolidated, or combined with another proceeding, without the prior written consent of all parties to any such proceeding. If a court of competent jurisdiction determines that all or part of this Litigation Class Action Waiver is unenforceable, unconscionable, void or voidable, the remainder of this Agreement shall remain in full force and effect.</b></li>\n            <li><b>Franchisees.</b>Franchisees operating a branded restaurant or store concept licensed by Merchant may participate in the Program pursuant to the terms and conditions of this Agreement provided that the individual franchisee: (1) is in compliance with its franchise agreement; and (2) enters into an agreement in substantially the same form as the Supplemental Agreement provided by Toppings to the Franchisee. Unless the parties mutually agree otherwise in writing, all Merchant owned branded restaurant(s) and store concept(s) shall be included and subject to the terms hereunder.</li>\n            <li><b>Communications from Toppings.</b> Merchant agrees to accept and receive communications from Toppings or Toppers, including via email, text message, calls, and push notifications to the cellular telephone number Merchant provides to Toppings. Merchant acknowledges that Merchant may receive communications generated by automatic telephone dialing systems and/or which will deliver prerecorded messages sent by or on behalf of Toppings, its affiliated companies and/or Toppers. Merchant may opt out of such communications in Merchant’s Account Settings or by replying “STOP” from the mobile device receiving such messages.</li>\n            <li><b>Attorneys’ Fees.</b> In any legal action to enforce the terms of this Agreement, the prevailing party in such action shall be entitled to recover its reasonable attorneys’ fees and costs from the other party.</li>\n            <li><b>General Provisions.</b> As set forth on the Sign-Up Sheet between Merchant and Toppings, the Sign-Up Sheet and these Terms constitute an integrated Agreement between the parties, which supersedes all prior agreements and communications of the parties, oral or written, with respect to the subject matter hereof. The rights and obligations set forth in these Terms, which by their nature should, or by their express terms do, survive or extend beyond the termination or expiration of these Terms shall so survive and extend. This Agreement is governed by and interpreted in accordance with the laws of the State of Delaware without regard to the conflicts of laws principles thereof. Merchant agrees that, except as set forth above in Section 19 (“Dispute Resolution”), the parties hereby consent to exclusive jurisdiction in the courts of the Merchant’s location. Merchant may not assign this Agreement in whole or in part without Toppings’s prior written consent. Toppings may freely assign this Agreement. This Agreement is binding upon, and inures to the benefit of, the employees, representatives, agents, affiliates, franchisors, franchisees, and permitted successors and assigns of each party, but shall not confer any rights or remedies upon any third party. All notices, requests, consents and other communications under the Parties' agreements must be in writing, and delivered by overnight courier to the addresses set forth on the Sign-Up Sheet (or any updated address properly noticed hereunder). Toppings’s address is 5190 Ivy Nole, Cumming, GA 30040. If any provision of this Agreement is held to be invalid, illegal or unenforceable for any reason, such invalidity, illegality or unenforceability will not affect any other provisions of this Agreement, and this Agreement will be construed as if such invalid, illegal or unenforceable provision had never been contained here.</li>\n          </ol>\n        </div>\n\n        {/*<button>Export as PDF</button>*/}\n      </div>\n    </article>\n  );\n}\n\nexport default PortalTermsService;\n","/home/zhao/src/toppings-vendor/src/pages/PortalRewards.js",["227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245"],"import React, { useState, useEffect, useRef } from 'react';\n\nimport Amplify, { Auth, API, graphqlOperation } from 'aws-amplify';\n\nimport awsConfig from '../utils/awsConfig';\nimport * as queries from '../graphql/queries';\nimport * as mutations from '../graphql/mutations';\nimport * as customQueries from '../graphql/customQueries';\nimport * as customMutations from '../graphql/customMutations';\n\nimport bubbleIcon from '../assets/images/bubble-icon-2.svg';\nimport loadingBubbleIcon from '../assets/images/bubble-icon-1.svg';\n\nfunction PortalRewards(props) {\n  let restaurantSk = props.vendor.getVendor.restaurant.sk;\n  let restaurantId = restaurantSk.slice(restaurantSk.lastIndexOf(\"#\")+1)\n  const defaultReward = {\n    name: \"Jelly Joy\", \n    points: 5, \n    description: \"10% discount on all jelly patties\"\n  };\n  const nameInput = useRef();\n  const pointsInput = useRef();\n  const descriptionInput = useRef();\n\n  const [mode, changeMode] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [selectedRewardItem, selectRewardItem] = useState(defaultReward);\n  const [rewardItems, setRewardItems] = useState({\n    // Rewards: [{id: 1, name: \"Jelly Joy\", price: 5, description: \"10% discount on all jelly patties.\"}, \n    //           {id: 2, name: \"Krabby Patty Happy Hour\", price: 5, description: \"10% discount on all Krabby Patties between 12PM and 3PM.\"},\n    //           {id: 3, name: \"Seanut Superstar\", price: 10, description: \"Buy one get one free Seanut Brittle.\"},]\n    Rewards: []\n  });\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  async function getData() {\n    // API.graphql(graphqlOperation(queries.listVendorRewards, { filter: { menuId: { eq: props.restaurant.id } } })).then(({ data: { listVendorRewards } }) => {\n    //   setRewardItems({\n    //     Rewards: listVendorRewards.items\n    //   });\n    // }).catch((error) => {\n    //   console.log(error);\n    // });\n    setLoading(true);\n    const response = await API.graphql(graphqlOperation(customQueries.getVendorRewards, { menuId: restaurantId }));\n    // const response = await API.graphql(graphqlOperation(queries.listVendorRewards, { filter: { menuId: { eq: props.restaurant.id }}}));\n    console.log(\"resp:\", response);\n    const rewards = response.data.getVendorRewards.sort((reward1, reward2) => (reward1.points > reward2. points ? 1 : -1));\n    console.log(rewards);\n    setRewardItems({\n      Rewards: rewards\n    });\n    setLoading(false);\n  }\n\n  async function addReward() {\n    const reward = {\n      itemName: nameInput.current.value,\n      menuId: restaurantId,\n      points: parseInt(pointsInput.current.value),\n      date_active_from: null,\n      date_active_to: null,\n      discountAmount: null,\n      discountPercentage: null,\n      description: descriptionInput.current.value,\n    };\n\n    const response = await API.graphql(graphqlOperation(customMutations.createVendorReward, reward));\n    // const response = await API.graphql(graphqlOperation(mutations.createVendorReward, { input: reward }));\n    const newReward = response.data.createVendorReward;\n    console.log(\"newREWARD\", newReward);\n    changeMode(\"\");\n    console.log(\"hallo\");\n    await getData();\n    selectRewardItem(defaultReward);\n  }\n\n  async function editReward() {\n    const reward = {\n      id: selectedRewardItem.id,\n      itemName: nameInput.current.value,\n      menuId: props.restaurant.id,\n      points: parseInt(pointsInput.current.value),\n      description: descriptionInput.current.value,\n    };\n\n    await API.graphql(graphqlOperation(customMutations.updateVendorReward, reward));\n    // const response = await API.graphql(graphqlOperation(mutations.updateVendorReward, { input: reward }));\n    changeMode(\"\");\n    getData();\n    selectRewardItem(defaultReward);\n  }\n\n  async function deleteReward() {\n    const reward = {\n      id: selectedRewardItem.id,\n    }\n\n    await API.graphql(graphqlOperation(customMutations.deleteVendorReward, reward));\n    // const response = await API.graphql(graphqlOperation(mutations.deleteVendorReward, { input: reward }));\n    changeMode(\"\");\n    getData();\n    selectRewardItem(defaultReward);\n  }\n\n  return (\n    <article className=\"portal-rewards-container\">\n      {loading ? \n        <div>\n          <header>\n            <img className=\"portal-empty-image\" src={loadingBubbleIcon} />\n            <span className=\"subheading\">Loading...</span>\n          </header>\n        </div>  \n      :\n        <div>\n          {mode == \"addReward\" || mode == \"editReward\" ? \n            <div className=\"portal-rewards-form-container\">\n              <header>\n                <span className=\"orange-heading\">New Reward</span>\n              </header>\n\n              <div className=\"content\">\n                <form className=\"portal-rewards-form\">\n                  <div className=\"portal-rewards-form-name-section\">\n                    <span className=\"subheading\">Reward Name</span>\n                    <input className=\"text-input\" type=\"text\" placeholder=\"Enter Your Reward Name\" ref={nameInput} defaultValue={mode == \"editReward\" ? selectedRewardItem.itemName : \"\"}/>\n                  </div>\n                  \n                  <div className=\"portal-rewards-form-points-section\">\n                    <span className=\"subheading\">Point Value</span>\n                    <input className=\"text-input\" type=\"number\" placeholder=\"Enter Your Reward Point Value\" ref={pointsInput} defaultValue={mode == \"editReward\" ? selectedRewardItem.points : \"\"}/>\n                  </div>\n                  \n                  <div className=\"portal-rewards-form-description-section\">\n                    <span className=\"subheading\">Reward Description</span>\n                    <textarea className=\"text-input\" type=\"text\" placeholder=\"Enter Your Reward Description\" ref={descriptionInput} defaultValue={mode == \"editReward\" ? selectedRewardItem.description : \"\"}/>\n                  </div>\n                </form>\n                \n                <div className=\"portal-rewards-form-submit-section\">\n                  <div>\n                    {mode == \"editReward\" ? \n                      <button className=\"red-text\" onClick={deleteReward}>Delete</button>\n                    : \"\"}\n                  </div>\n                  <div>\n                    <button className=\"orange-text\" onClick={() => changeMode(\"\")}>Cancel</button>\n                    <button className=\"orange\" onClick={mode == \"addReward\" ? addReward : editReward}>{mode == \"addReward\" ? \"Add\" : \"Save\"} Reward</button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          : rewardItems.Rewards.length > 0 ? \n            <div className=\"portal-rewards-list-container\">\n              <header>\n                <span className=\"orange-heading\">Active Rewards</span>\n              </header>\n\n              <div className=\"content\">\n                <div className=\"portal-rewards-list\">\n                  {Object.keys(rewardItems).map((category =>\n                    <div className=\"rewards-category-container\" key={category.id}>\n                      <span className=\"blue-heading\"></span>\n\n                      {rewardItems[category].map(item => \n                        <div key={item.id} className={selectedRewardItem == item ? \"reward-container active\" : \"reward-container\"} onClick={() => selectRewardItem(item)}>\n                          <span className=\"subheading\">{item.itemName}</span>\n                          <span className=\"subheading\">{item.points} pts</span>\n                          <div className=\"reward-description\">{item.description}</div>\n                        </div>\n                      )}\n                    </div> \n                  ))} \n                </div>\n                <div className=\"portal-rewards-view\">\n                  {selectedRewardItem != null && selectedRewardItem.name != defaultReward.name ? \n                  <div>\n                    <span className=\"orange-heading\">{selectedRewardItem.itemName}</span>\n                    <span className=\"blue-heading\">{selectedRewardItem.points} points</span>\n                    <span className=\"subheading\">Description</span>\n                    <div className=\"rewards-item-description\">{selectedRewardItem.description}</div>\n                    <button className=\"orange\" onClick={() => changeMode(\"editReward\")}>Edit Reward</button>\n                  </div>\n                  : \"\"}\n                </div>\n                <div className=\"portal-rewards-view-buttons\">\n                  <button className=\"orange\" onClick={() => changeMode(\"addReward\")}>Add Reward</button>\n                </div>\n              </div>\n            </div>\n          :\n            <div>\n              <header>\n                <img className=\"portal-empty-image\" src={bubbleIcon} />\n                <span className=\"subheading\">You have no active rewards.</span>\n                <b>Get users excited by adding <br /> reward opportunities!</b>\n              </header>\n\n              <div className=\"content\">\n                <button onClick={() => changeMode(\"addReward\")}>Add Reward</button>\n              </div>\n            </div>\n          }\n        </div>\n      }\n    </article>\n  );\n}\n\nexport default PortalRewards;\n","/home/zhao/src/toppings-vendor/src/pages/PortalSettings.js",["246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265"],"import React, { useState, useEffect, useRef } from 'react';\n\nimport Amplify, { Auth, API, graphqlOperation } from 'aws-amplify';\n\nimport awsConfig from '../utils/awsConfig';\nimport * as queries from '../graphql/queries';\nimport * as mutations from '../graphql/mutations';\nimport * as customMutations from '../graphql/customMutations';\n\nimport settingsDesign from '../assets/images/settings-design.PNG';\nimport locationIcon from '../assets/images/location-icon.svg';\nimport phoneIcon from '../assets/images/phone-icon.svg';\nimport clockIcon from '../assets/images/clock-icon.svg';\n\nfunction PortalSettings(props) {\n  const defaultVendor = {\n    id: props.restaurant.id != null && props.restaurant.id.length > 0 ? props.restaurant.id : \"-1\",\n    name: props.restaurant.name != null && props.restaurant.name.length > 0 ? props.restaurant.name : \"Your Restaurant Name\",\n    description: props.restaurant.description != null && props.restaurant.description.length > 0 ? props.restaurant.description : \"Your Restaurant Description\",\n    // tags: [\"Fast Food\", \"Outdoor Dining\"],\n    tags: [],\n    address: props.restaurant.address != null && props.restaurant.address.length > 0 && \n             props.restaurant.city != null && props.restaurant.city.length > 0 && \n             props.restaurant.state != null && props.restaurant.state.length > 0 && \n             props.restaurant.zip_code != null && props.restaurant.zip_code.length > 0 ?\n             `${props.restaurant.address}, ${props.restaurant.city}, ${props.restaurant.state} ${props.restaurant.zip_code}`\n             : \"Your Address, Your City, Your State Your Zip Code\",\n    contact: props.restaurant.restaurantOwnerName,\n    phoneNumber: props.restaurant.phoneNumber != null && props.restaurant.phoneNumber.length > 0 ? props.restaurant.phoneNumber : \"Your Restaurant Phone Number\",\n    email: props.restaurant.email != null && props.restaurant.email.length > 0 ? props.restaurant.email : \"Your Restaurant Email\",\n    hours: {\n      Sunday: props.restaurant.sundayHours != null && props.restaurant.sundayHours.length > 0 ? [props.restaurant.sundayHours.split(\"-\")[0], props.restaurant.sundayHours.split(\"-\")[1]] : [\"07:00 AM\", \"12:00 AM\"],\n      Monday: props.restaurant.mondayHours != null && props.restaurant.mondayHours.length > 0 ? [props.restaurant.mondayHours.split(\"-\")[0], props.restaurant.mondayHours.split(\"-\")[1]] : [\"07:00 AM\", \"12:00 AM\"],\n      Tuesday: props.restaurant.tuesdayHours != null && props.restaurant.tuesdayHours.length > 0 ? [props.restaurant.tuesdayHours.split(\"-\")[0], props.restaurant.tuesdayHours.split(\"-\")[1]] : [\"07:00 AM\", \"12:00 AM\"],\n      Wednesday: props.restaurant.wednesdayHours != null && props.restaurant.wednesdayHours.length > 0 ? [props.restaurant.wednesdayHours.split(\"-\")[0], props.restaurant.wednesdayHours.split(\"-\")[1]] : [\"07:00 AM\", \"12:00 AM\"],\n      Thursday: props.restaurant.thursdayHours != null && props.restaurant.thursdayHours.length > 0 ? [props.restaurant.thursdayHours.split(\"-\")[0], props.restaurant.thursdayHours.split(\"-\")[1]] : [\"07:00 AM\", \"12:00 AM\"],\n      Friday: props.restaurant.fridayHours != null && props.restaurant.fridayHours.length > 0 ? [props.restaurant.fridayHours.split(\"-\")[0], props.restaurant.fridayHours.split(\"-\")[1]] : [\"07:00 AM\", \"12:00 AM\"],\n      Saturday: props.restaurant.saturdayHours != null && props.restaurant.saturdayHours.length > 0 ? [props.restaurant.saturdayHours.split(\"-\")[0], props.restaurant.saturdayHours.split(\"-\")[1]] : [\"07:00 AM\", \"12:00 AM\"],\n    }\n  };\n\n  const nameInput = useRef();\n  const tagInput = useRef();\n  const descriptionInput = useRef();\n  const addressInput = useRef();\n  const phoneNumberInput = useRef();\n  const contactInput = useRef();\n  const emailInput = useRef();\n  const timeInput = useRef();\n\n  const [mode, changeMode] = useState(\"\");\n  const [vendor, setVendor] = useState(defaultVendor);\n  const [vendorForm, setVendorForm] = useState({\n    hours: {\n      Sunday: {startTime: defaultVendor.hours.Sunday[0].split(\" \")[0], startPeriod: defaultVendor.hours.Sunday[0].split(\" \")[1], endTime: defaultVendor.hours.Sunday[1].split(\" \")[0], endPeriod: defaultVendor.hours.Sunday[1].split(\" \")[1]},\n      Monday: {startTime: defaultVendor.hours.Monday[0].split(\" \")[0], startPeriod: defaultVendor.hours.Monday[0].split(\" \")[1], endTime: defaultVendor.hours.Monday[1].split(\" \")[0], endPeriod: defaultVendor.hours.Monday[1].split(\" \")[1]},\n      Tuesday: {startTime: defaultVendor.hours.Tuesday[0].split(\" \")[0], startPeriod: defaultVendor.hours.Tuesday[0].split(\" \")[1], endTime: defaultVendor.hours.Tuesday[1].split(\" \")[0], endPeriod: defaultVendor.hours.Tuesday[1].split(\" \")[1]},\n      Wednesday: {startTime: defaultVendor.hours.Wednesday[0].split(\" \")[0], startPeriod: defaultVendor.hours.Wednesday[0].split(\" \")[1], endTime: defaultVendor.hours.Wednesday[1].split(\" \")[0], endPeriod: defaultVendor.hours.Wednesday[1].split(\" \")[1]},\n      Thursday: {startTime: defaultVendor.hours.Thursday[0].split(\" \")[0], startPeriod: defaultVendor.hours.Thursday[0].split(\" \")[1], endTime: defaultVendor.hours.Thursday[1].split(\" \")[0], endPeriod: defaultVendor.hours.Thursday[1].split(\" \")[1]},\n      Friday: {startTime: defaultVendor.hours.Friday[0].split(\" \")[0], startPeriod: defaultVendor.hours.Friday[0].split(\" \")[1], endTime: defaultVendor.hours.Friday[1].split(\" \")[0], endPeriod: defaultVendor.hours.Friday[1].split(\" \")[1]},\n      Saturday: {startTime: defaultVendor.hours.Saturday[0].split(\" \")[0], startPeriod: defaultVendor.hours.Saturday[0].split(\" \")[1], endTime: defaultVendor.hours.Saturday[1].split(\" \")[0], endPeriod: defaultVendor.hours.Saturday[1].split(\" \")[1]},\n    }\n  });\n\n  function changeVendorHours(e, day, dayHalf, timePlace) {\n    const vendorFormHours = vendorForm.hours;\n    let currentHours = vendorForm.hours[day][dayHalf];\n    vendorForm.hours[day][dayHalf] = currentHours.substr(0, timePlace) + e.target.value + currentHours.substr(timePlace + e.target.value.length);\n    setVendorForm({...vendorForm, vendorFormHours});\n    console.log(vendorForm.hours)\n  }\n\n  function changeVendorHoursPeriod(day, periodType, period) {\n    const vendorFormHours = vendorForm.hours;\n    vendorForm.hours[day][periodType] = period;\n    setVendorForm({...vendorForm, vendorFormHours});\n  }\n\n  async function updateVendor() {\n    const address = addressInput.current.value.split(\", \")[0];\n    const city = addressInput.current.value.split(\", \")[1];\n    const state = addressInput.current.value.split(\", \")[2].slice(0, -6);\n    const zipCode = addressInput.current.value.split(\", \")[2].slice(-5);\n    let phoneNumber = phoneNumberInput.current.value.replaceAll(/-/g, \"\").replaceAll(/\\s/g, \"\");\n    if (phoneNumber.charAt(0) != \"+\") {\n        phoneNumber = \"+\" + (phoneNumber.length == 10 ? \"1\" : \"\") + phoneNumber;\n    }\n\n    console.log(\"UP\", vendor)\n\n    // const updatedRestaurant = {\n    //   id: props.restaurant.id,\n    //   input: { isOpen: \"false\", },\n    // };\n\n    // console.log(\"TOGs\", props.restaurant.id)\n    // const updatedRestaurant = {\n    //   id: props.restaurant.id,\n    //   input: { isOpen: \"false\", },\n    // };\n\n    // console.log(\"UR\", updatedRestaurant);\n\n    // // const updatedRestaurantResponse = await API.graphql(graphqlOperation(mutations.updateRestaurant, { input: updatedRestaurant }));\n    // const updatedRestaurantResponse = await API.graphql(graphqlOperation(customMutations.updateRestaurant, updatedRestaurant));\n    // console.log(updatedRestaurantResponse)\n\n    const updatedRestaurant = {\n      id: vendor.id,\n      input: {\n        name: nameInput.current.value,\n        description: descriptionInput.current.value,\n        phoneNumber: phoneNumber,\n        // email: emailInput.current.value,\n        address: address,\n        city: city,\n        state: state,\n        zip_code: zipCode,\n        restaurantOwnerName: contactInput.current.value,\n        sundayHours: vendorForm.hours.Sunday.startTime + \" \" + vendorForm.hours.Sunday.startPeriod + \"-\" + vendorForm.hours.Sunday.endTime + \" \" + vendorForm.hours.Sunday.endPeriod,\n        mondayHours: vendorForm.hours.Monday.startTime + \" \" + vendorForm.hours.Monday.startPeriod + \"-\" + vendorForm.hours.Monday.endTime + \" \" + vendorForm.hours.Monday.endPeriod,\n        tuesdayHours: vendorForm.hours.Tuesday.startTime + \" \" + vendorForm.hours.Tuesday.startPeriod + \"-\" + vendorForm.hours.Tuesday.endTime + \" \" + vendorForm.hours.Tuesday.endPeriod,\n        wednesdayHours: vendorForm.hours.Wednesday.startTime + \" \" + vendorForm.hours.Wednesday.startPeriod + \"-\" + vendorForm.hours.Wednesday.endTime + \" \" + vendorForm.hours.Wednesday.endPeriod,\n        thursdayHours: vendorForm.hours.Thursday.startTime + \" \" + vendorForm.hours.Thursday.startPeriod + \"-\" + vendorForm.hours.Thursday.endTime + \" \" + vendorForm.hours.Thursday.endPeriod,\n        fridayHours: vendorForm.hours.Friday.startTime + \" \" + vendorForm.hours.Friday.startPeriod + \"-\" + vendorForm.hours.Friday.endTime + \" \" + vendorForm.hours.Friday.endPeriod,\n        saturdayHours: vendorForm.hours.Saturday.startTime + \" \" + vendorForm.hours.Saturday.startPeriod + \"-\" + vendorForm.hours.Saturday.endTime + \" \" + vendorForm.hours.Saturday.endPeriod,\n      },\n    };\n\n    const updatedRestaurantResponse = await API.graphql(graphqlOperation(customMutations.updateRestaurant, updatedRestaurant));\n    console.log(updatedRestaurantResponse);\n    changeMode(\"\");\n\n    // API.graphql(graphqlOperation(customMutations.updateRestaurant, updatedVendor))\n    // .then(updateRestaurant => {\n    //   console.log('UPDATED RESTAURANT', updateRestaurant);\n    //   props.getData();\n    //   changeMode('');\n    // })\n    // .catch(err => {\n    //   console.log(err);\n    // });\n    // API.graphql({ query: mutations.updateRestaurant, variables: { input: updatedVendor } }).then(({ data: { updateRestaurant } }) => {\n    //   console.log(\"UPDATE\", updateRestaurant);\n    //   props.getData();\n    //   // setVendor(oldVendor => ({\n    //   //   ...oldVendor,\n    //   //   description: updateRestaurant.description,\n    //   // }))\n    //   changeMode(\"\")\n    // }).catch((error) => {\n    //   console.log(error);\n    // });\n  }\n  \n  return (\n    <article className=\"portal-settings-container\">\n      {mode == \"edit\" ?\n        <div className=\"portal-settings-form-container\">\n          <header>\n            <span className=\"orange-heading\">Edit Information</span>\n          </header>\n\n          <div className=\"content\">\n            <form className=\"portal-vendor-info-form\">\n              <div id=\"portal-settings-form-name-section\">\n                <span className=\"subheading\">Name</span>\n                <input className=\"text-input\" type=\"text\" placeholder=\"Vendor Name\" defaultValue={vendor.name} ref={nameInput} />\n              </div>\n              \n              <div id=\"portal-settings-form-description-section\">\n                <span className=\"subheading\">Description</span>\n                <textarea className=\"text-input\" type=\"text\" placeholder=\"Vendor Description\" defaultValue={vendor.description} ref={descriptionInput} />\n              </div>\n              \n              <div id=\"portal-settings-form-tags-section\">\n                {/*<span className=\"subheading\">Tags</span>\n                <input className=\"text-input\" type=\"text\" placeholder=\"Fast Food, Outdoor Dining\" ref={tagInput} />*/}\n              </div>\n              \n              <div id=\"portal-settings-form-address-section\">\n                <span className=\"subheading\">Address</span>\n                <input className=\"text-input\" type=\"text\" placeholder=\"Vendor Address\" defaultValue={vendor.address} ref={addressInput} />\n              </div>\n              \n              <div id=\"portal-settings-form-contact-section\">\n                <span className=\"subheading\">Point of Contact</span>\n                <input className=\"text-input\" type=\"text\" placeholder=\"Vendor Point of Contact\" defaultValue={vendor.contact} ref={contactInput} />\n              </div>\n\n              <div id=\"portal-settings-form-phone-section\">\n                <span className=\"subheading\">Phone Number</span>\n                <input className=\"text-input\" type=\"text\" placeholder=\"123-456-7890\" defaultValue={vendor.phoneNumber} ref={phoneNumberInput} />\n              </div>\n\n              <div id=\"portal-settings-form-email-section\">\n                <span className=\"subheading\">Email Address</span>\n                <input className=\"text-input\" type=\"text\" placeholder=\"Vendor Email\" defaultValue={vendor.email} ref={emailInput} readOnly />\n              </div>\n\n              <div id=\"portal-settings-form-hours-section\">\n                <span className=\"subheading\">Hours of Operations</span>\n                {Object.keys(vendor.hours).map((day => \n                  <div key={day}>\n                    <span>{day}:</span>\n                    <span>\n                      <input className=\"number-input\" type=\"text\" defaultValue={vendor.hours[day][0][0]} onChange={(e) => changeVendorHours(e, day, \"startTime\", 0)} maxLength=\"1\"/>\n                      <input className=\"number-input\" type=\"text\" defaultValue={vendor.hours[day][0][1]} onChange={(e) => changeVendorHours(e, day, \"startTime\", 1)} maxLength=\"1\" />\n                      :\n                      <input className=\"number-input\" type=\"text\" defaultValue={vendor.hours[day][0][3]} onChange={(e) => changeVendorHours(e, day, \"startTime\", 3)} maxLength=\"1\" />\n                      <input className=\"number-input\" type=\"text\" defaultValue={vendor.hours[day][0][4]} onChange={(e) => changeVendorHours(e, day, \"startTime\", 4)} maxLength=\"1\" />\n                      <div className=\"am-pm-radio\">\n                        <span className={vendorForm.hours[day].startPeriod == \"AM\" ? \"am-pm-radio-option active\" : \"am-pm-radio-option\"} onClick={() => changeVendorHoursPeriod(day, \"startPeriod\", \"AM\")}>AM</span>\n                        <span className={vendorForm.hours[day].startPeriod == \"PM\" ? \"am-pm-radio-option active\" : \"am-pm-radio-option\"} onClick={() => changeVendorHoursPeriod(day, \"startPeriod\", \"PM\")}>PM</span>\n                      </div>\n                      <span className=\"hyphen\">-</span>\n                      <input className=\"number-input\" type=\"text\" defaultValue={vendor.hours[day][1][0]} onChange={(e) => changeVendorHours(e, day, \"endTime\", 0)} maxLength=\"1\" />\n                      <input className=\"number-input\" type=\"text\" defaultValue={vendor.hours[day][1][1]} onChange={(e) => changeVendorHours(e, day, \"endTime\", 1)} maxLength=\"1\" />\n                      :\n                      <input className=\"number-input\" type=\"text\" defaultValue={vendor.hours[day][1][3]} onChange={(e) => changeVendorHours(e, day, \"endTime\", 3)} maxLength=\"1\" />\n                      <input className=\"number-input\" type=\"text\" defaultValue={vendor.hours[day][1][4]} onChange={(e) => changeVendorHours(e, day, \"endTime\", 4)} maxLength=\"1\" />\n                      <div className=\"am-pm-radio\">\n                      <span className={vendorForm.hours[day].endPeriod == \"AM\" ? \"am-pm-radio-option active\" : \"am-pm-radio-option\"} onClick={() => changeVendorHoursPeriod(day, \"endPeriod\", \"AM\")}>AM</span>\n                        <span className={vendorForm.hours[day].endPeriod == \"PM\" ? \"am-pm-radio-option active\" : \"am-pm-radio-option\"} onClick={() => changeVendorHoursPeriod(day, \"endPeriod\", \"PM\")}>PM</span>\n                      </div>\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </form>\n            \n            <div id=\"portal-settings-form-submit-section\">\n              <button className=\"orange-text\" onClick={() => changeMode(\"\")}>Cancel</button>\n              <button className=\"orange\" onClick={() => updateVendor()}>Update Information</button>\n            </div>\n          </div>\n        </div>\n      :\n        <div className=\"portal-vendor-info-container\">\n          <header>\n            <span className=\"subheading\">Toppings Vendor</span>\n            <span className=\"orange-heading\">{vendor.name}</span>\n            <span className=\"caption\">{vendor.description}</span>\n            {vendor.tags.map((tag => \n              <button key={tag} className=\"tag\">{tag}</button>  \n            ))}\n          </header>\n\n          <div className=\"content\">\n            <div className=\"vendor-info-sections-container\">\n              <div id=\"vendor-location-info-section\" className=\"vendor-info-section\">\n                <img src={locationIcon} />\n                <div>\n                  <span className=\"subheading\">Location</span>\n                  <span>{vendor.address}</span>\n                </div>\n              </div>\n              <div id=\"vendor-contact-info-section\" className=\"vendor-info-section\">\n                <img src={phoneIcon} />\n                <div>\n                  <span className=\"subheading\">Contact</span>\n                  <div id=\"vendor-contact-info\">\n                    <span>Main Point of Contact:</span>\n                    <span>{vendor.contact}</span>\n                    <span>Phone Number</span>\n                    <span>{vendor.phoneNumber}</span>\n                    <span>Email Address</span>\n                    <span>{vendor.email}</span>\n                  </div>\n                </div>\n              </div>\n              <div id=\"vendor-hours-info-section\" className=\"vendor-info-section\">\n                <img src={clockIcon} />\n                <div>\n                  <span className=\"subheading\">Hours</span>\n                  <div id=\"vendor-hours-info\">\n                    {Object.keys(vendor.hours).map((day => \n                      <div key={day}>\n                        <span>{day}:</span>\n                        <span>{parseInt(vendor.hours[day][0].split(\":\")[0]) + \":\" + vendor.hours[day][0].split(\":\")[1]} - {parseInt(vendor.hours[day][1].split(\":\")[0]) + \":\" + vendor.hours[day][1].split(\":\")[1]}</span>\n                      </div>\n                    ))}\n                  </div>\n                  </div>\n              </div>\n              <div></div>\n              <div id=\"vendor-info-button-section\">\n                <button className=\"orange\" onClick={() => changeMode(\"edit\")}>Edit Information</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      }\n    </article>\n  );\n}\n\nexport default PortalSettings;\n","/home/zhao/src/toppings-vendor/src/graphql/customQueries.js",[],"/home/zhao/src/toppings-vendor/src/graphql/customMutations.js",[],"/home/zhao/src/toppings-vendor/src/graphql/queries.js",[],"/home/zhao/src/toppings-vendor/src/graphql/mutations.js",[],"/home/zhao/src/toppings-vendor/src/utils/useInterval.js",["266","267"],"import React, { useState, useEffect, useRef } from 'react';\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n}, [callback]);\n// Set up the interval.\nuseEffect(() => {\n  function tick() {\n    savedCallback.current();\n  }\n  if (delay !== null) {\n    let id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }\n}, [delay]);\n}\nexport default useInterval;","/home/zhao/src/toppings-vendor/src/graphql/customSubscriptions.js",[],"/home/zhao/src/toppings-vendor/src/graphql/subscriptions.js",[],"/home/zhao/src/toppings-vendor/src/components/RadioButton.js",["268","269","270","271","272"],"import React, { useState, useEffect, useRef } from 'react';\n\nfunction RadioButton(props) {\n  return (\n    <div className=\"radio-button\">\n      <div className={props.currentChoice == props.options[0] ? \"radio-button-option active\" : \"radio-button-option\"} onClick={() => props.setChoice(props.options[0])}>{props.options[0]}</div>\n      <div className={props.currentChoice == props.options[1] ? \"radio-button-option active\" : \"radio-button-option\"} onClick={() => props.setChoice(props.options[1])}>{props.options[1]}</div>\n    </div>\n  );\n}\n\nexport default RadioButton;","/home/zhao/src/toppings-vendor/src/client.js",["273"],"\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { getCurrentUser } from './utils/session';\n\nconst apolloLocal = 'http://localhost:4000/graphql';\nconst apolloProd = 'https://api.toppingsapp.com/graphql';\n\nconst httpLink = new HttpLink({\n  // uri: __DEV__ ? apolloLocal : apolloProd,\n  uri: apolloLocal,\n});\n\nconst authLink = setContext(async (_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const currentUser = getCurrentUser();\n  console.log(currentUser);\n  const token = currentUser.signInUserSession.idToken.jwtToken;\n  const accessToken = currentUser.signInUserSession.accessToken.jwtToken;\n\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `${token}` : '',\n      accessAuthorization: accessToken ? `${accessToken}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache({\n    typePolicies: {\n      FeedItem: {\n        keyFields: ['pk'],\n        fields: {\n          reactions: {\n            merge: false,\n          },\n        },\n      },\n      Restaurant: {\n        keyFields: ['sk'],\n      },\n      Query: {\n        fields: {\n          IncomingFriendRequests: {\n            merge: false,\n          },\n          getOutgoingFriendRequest: {\n            merge: false,\n          },\n          getFriendsFriends: {\n            merge: false,\n          },\n        },\n      },\n    },\n  }),\n  link: authLink.concat(httpLink),\n});\n\nexport default client;",{"ruleId":"274","replacedBy":"275"},{"ruleId":"276","replacedBy":"277"},{"ruleId":"278","severity":1,"message":"279","line":10,"column":27,"nodeType":"280","messageId":"281","endLine":10,"endColumn":36},{"ruleId":"278","severity":1,"message":"282","line":11,"column":10,"nodeType":"280","messageId":"281","endLine":11,"endColumn":23},{"ruleId":"278","severity":1,"message":"283","line":14,"column":10,"nodeType":"280","messageId":"281","endLine":14,"endColumn":24},{"ruleId":"278","severity":1,"message":"284","line":14,"column":26,"nodeType":"280","messageId":"281","endLine":14,"endColumn":38},{"ruleId":"278","severity":1,"message":"285","line":14,"column":40,"nodeType":"280","messageId":"281","endLine":14,"endColumn":52},{"ruleId":"278","severity":1,"message":"286","line":14,"column":54,"nodeType":"280","messageId":"281","endLine":14,"endColumn":68},{"ruleId":"287","severity":1,"message":"288","line":35,"column":94,"nodeType":"289","endLine":35,"endColumn":112},{"ruleId":"278","severity":1,"message":"290","line":1,"column":38,"nodeType":"280","messageId":"281","endLine":1,"endColumn":44},{"ruleId":"278","severity":1,"message":"291","line":4,"column":25,"nodeType":"280","messageId":"281","endLine":4,"endColumn":28},{"ruleId":"278","severity":1,"message":"292","line":4,"column":30,"nodeType":"280","messageId":"281","endLine":4,"endColumn":46},{"ruleId":"278","severity":1,"message":"293","line":8,"column":13,"nodeType":"280","messageId":"281","endLine":8,"endColumn":20},{"ruleId":"278","severity":1,"message":"294","line":10,"column":13,"nodeType":"280","messageId":"281","endLine":10,"endColumn":22},{"ruleId":"278","severity":1,"message":"295","line":11,"column":26,"nodeType":"280","messageId":"281","endLine":11,"endColumn":40},{"ruleId":"278","severity":1,"message":"286","line":11,"column":42,"nodeType":"280","messageId":"281","endLine":11,"endColumn":56},{"ruleId":"278","severity":1,"message":"296","line":20,"column":8,"nodeType":"280","messageId":"281","endLine":20,"endColumn":21},{"ruleId":"278","severity":1,"message":"297","line":33,"column":10,"nodeType":"280","messageId":"281","endLine":33,"endColumn":20},{"ruleId":"278","severity":1,"message":"298","line":33,"column":22,"nodeType":"280","messageId":"281","endLine":33,"endColumn":35},{"ruleId":"299","severity":1,"message":"300","line":38,"column":6,"nodeType":"301","endLine":38,"endColumn":8,"suggestions":"302"},{"ruleId":"278","severity":1,"message":"303","line":64,"column":18,"nodeType":"280","messageId":"281","endLine":64,"endColumn":23},{"ruleId":"287","severity":1,"message":"288","line":90,"column":26,"nodeType":"289","endLine":90,"endColumn":77},{"ruleId":"304","severity":1,"message":"305","line":94,"column":119,"nodeType":"306","messageId":"307","endLine":94,"endColumn":121},{"ruleId":"287","severity":1,"message":"288","line":94,"column":228,"nodeType":"289","endLine":94,"endColumn":252},{"ruleId":"304","severity":1,"message":"305","line":95,"column":139,"nodeType":"306","messageId":"307","endLine":95,"endColumn":141},{"ruleId":"287","severity":1,"message":"288","line":95,"column":268,"nodeType":"289","endLine":95,"endColumn":298},{"ruleId":"304","severity":1,"message":"305","line":96,"column":115,"nodeType":"306","messageId":"307","endLine":96,"endColumn":117},{"ruleId":"287","severity":1,"message":"288","line":96,"column":220,"nodeType":"289","endLine":96,"endColumn":242},{"ruleId":"304","severity":1,"message":"305","line":97,"column":121,"nodeType":"306","messageId":"307","endLine":97,"endColumn":123},{"ruleId":"287","severity":1,"message":"288","line":97,"column":232,"nodeType":"289","endLine":97,"endColumn":257},{"ruleId":"304","severity":1,"message":"305","line":98,"column":123,"nodeType":"306","messageId":"307","endLine":98,"endColumn":125},{"ruleId":"287","severity":1,"message":"288","line":98,"column":236,"nodeType":"289","endLine":98,"endColumn":262},{"ruleId":"287","severity":1,"message":"288","line":99,"column":72,"nodeType":"289","endLine":99,"endColumn":96},{"ruleId":"278","severity":1,"message":"293","line":6,"column":13,"nodeType":"280","messageId":"281","endLine":6,"endColumn":20},{"ruleId":"278","severity":1,"message":"294","line":7,"column":13,"nodeType":"280","messageId":"281","endLine":7,"endColumn":22},{"ruleId":"278","severity":1,"message":"285","line":10,"column":74,"nodeType":"280","messageId":"281","endLine":10,"endColumn":86},{"ruleId":"299","severity":1,"message":"308","line":39,"column":6,"nodeType":"301","endLine":39,"endColumn":8,"suggestions":"309"},{"ruleId":"278","severity":1,"message":"310","line":75,"column":9,"nodeType":"280","messageId":"281","endLine":75,"endColumn":13},{"ruleId":"304","severity":1,"message":"311","line":208,"column":31,"nodeType":"306","messageId":"307","endLine":208,"endColumn":33},{"ruleId":"304","severity":1,"message":"305","line":217,"column":31,"nodeType":"306","messageId":"307","endLine":217,"endColumn":33},{"ruleId":"304","severity":1,"message":"311","line":217,"column":51,"nodeType":"306","messageId":"307","endLine":217,"endColumn":53},{"ruleId":"304","severity":1,"message":"311","line":218,"column":31,"nodeType":"306","messageId":"307","endLine":218,"endColumn":33},{"ruleId":"304","severity":1,"message":"305","line":231,"column":29,"nodeType":"306","messageId":"307","endLine":231,"endColumn":31},{"ruleId":"304","severity":1,"message":"311","line":231,"column":49,"nodeType":"306","messageId":"307","endLine":231,"endColumn":51},{"ruleId":"304","severity":1,"message":"311","line":232,"column":29,"nodeType":"306","messageId":"307","endLine":232,"endColumn":31},{"ruleId":"278","severity":1,"message":"312","line":1,"column":17,"nodeType":"280","messageId":"281","endLine":1,"endColumn":25},{"ruleId":"278","severity":1,"message":"279","line":1,"column":27,"nodeType":"280","messageId":"281","endLine":1,"endColumn":36},{"ruleId":"278","severity":1,"message":"290","line":1,"column":38,"nodeType":"280","messageId":"281","endLine":1,"endColumn":44},{"ruleId":"287","severity":1,"message":"288","line":8,"column":7,"nodeType":"289","endLine":8,"endColumn":36},{"ruleId":"278","severity":1,"message":"290","line":1,"column":38,"nodeType":"280","messageId":"281","endLine":1,"endColumn":44},{"ruleId":"278","severity":1,"message":"313","line":3,"column":8,"nodeType":"280","messageId":"281","endLine":3,"endColumn":15},{"ruleId":"278","severity":1,"message":"314","line":3,"column":19,"nodeType":"280","messageId":"281","endLine":3,"endColumn":23},{"ruleId":"278","severity":1,"message":"315","line":5,"column":8,"nodeType":"280","messageId":"281","endLine":5,"endColumn":17},{"ruleId":"278","severity":1,"message":"293","line":7,"column":13,"nodeType":"280","messageId":"281","endLine":7,"endColumn":20},{"ruleId":"278","severity":1,"message":"294","line":8,"column":13,"nodeType":"280","messageId":"281","endLine":8,"endColumn":22},{"ruleId":"278","severity":1,"message":"316","line":9,"column":13,"nodeType":"280","messageId":"281","endLine":9,"endColumn":26},{"ruleId":"278","severity":1,"message":"317","line":19,"column":10,"nodeType":"280","messageId":"281","endLine":19,"endColumn":23},{"ruleId":"278","severity":1,"message":"318","line":26,"column":9,"nodeType":"280","messageId":"281","endLine":26,"endColumn":32},{"ruleId":"278","severity":1,"message":"319","line":50,"column":7,"nodeType":"280","messageId":"281","endLine":50,"endColumn":14},{"ruleId":"299","severity":1,"message":"320","line":56,"column":6,"nodeType":"301","endLine":56,"endColumn":8,"suggestions":"321"},{"ruleId":"304","severity":1,"message":"311","line":86,"column":79,"nodeType":"306","messageId":"307","endLine":86,"endColumn":81},{"ruleId":"304","severity":1,"message":"305","line":87,"column":23,"nodeType":"306","messageId":"307","endLine":87,"endColumn":25},{"ruleId":"304","severity":1,"message":"305","line":90,"column":30,"nodeType":"306","messageId":"307","endLine":90,"endColumn":32},{"ruleId":"304","severity":1,"message":"305","line":100,"column":30,"nodeType":"306","messageId":"307","endLine":100,"endColumn":32},{"ruleId":"304","severity":1,"message":"305","line":110,"column":30,"nodeType":"306","messageId":"307","endLine":110,"endColumn":32},{"ruleId":"304","severity":1,"message":"305","line":110,"column":58,"nodeType":"306","messageId":"307","endLine":110,"endColumn":60},{"ruleId":"322","severity":1,"message":"323","line":130,"column":19,"nodeType":"324","messageId":"325","endLine":130,"endColumn":20,"fix":"326"},{"ruleId":"304","severity":1,"message":"305","line":210,"column":31,"nodeType":"306","messageId":"307","endLine":210,"endColumn":33},{"ruleId":"287","severity":1,"message":"288","line":266,"column":11,"nodeType":"289","endLine":266,"endColumn":73},{"ruleId":"287","severity":1,"message":"288","line":277,"column":152,"nodeType":"289","endLine":277,"endColumn":202},{"ruleId":"304","severity":1,"message":"305","line":284,"column":68,"nodeType":"306","messageId":"307","endLine":284,"endColumn":70},{"ruleId":"304","severity":1,"message":"305","line":292,"column":68,"nodeType":"306","messageId":"307","endLine":292,"endColumn":70},{"ruleId":"304","severity":1,"message":"305","line":302,"column":68,"nodeType":"306","messageId":"307","endLine":302,"endColumn":70},{"ruleId":"287","severity":1,"message":"288","line":394,"column":70,"nodeType":"289","endLine":394,"endColumn":119},{"ruleId":"287","severity":1,"message":"288","line":421,"column":13,"nodeType":"289","endLine":421,"endColumn":68},{"ruleId":"278","severity":1,"message":"313","line":3,"column":8,"nodeType":"280","messageId":"281","endLine":3,"endColumn":15},{"ruleId":"278","severity":1,"message":"314","line":3,"column":19,"nodeType":"280","messageId":"281","endLine":3,"endColumn":23},{"ruleId":"278","severity":1,"message":"315","line":5,"column":8,"nodeType":"280","messageId":"281","endLine":5,"endColumn":17},{"ruleId":"278","severity":1,"message":"327","line":7,"column":13,"nodeType":"280","messageId":"281","endLine":7,"endColumn":26},{"ruleId":"278","severity":1,"message":"294","line":9,"column":13,"nodeType":"280","messageId":"281","endLine":9,"endColumn":22},{"ruleId":"278","severity":1,"message":"328","line":17,"column":10,"nodeType":"280","messageId":"281","endLine":17,"endColumn":13},{"ruleId":"278","severity":1,"message":"329","line":34,"column":9,"nodeType":"280","messageId":"281","endLine":34,"endColumn":22},{"ruleId":"278","severity":1,"message":"330","line":35,"column":9,"nodeType":"280","messageId":"281","endLine":35,"endColumn":23},{"ruleId":"278","severity":1,"message":"331","line":49,"column":10,"nodeType":"280","messageId":"281","endLine":49,"endColumn":26},{"ruleId":"278","severity":1,"message":"332","line":50,"column":10,"nodeType":"280","messageId":"281","endLine":50,"endColumn":27},{"ruleId":"278","severity":1,"message":"333","line":50,"column":29,"nodeType":"280","messageId":"281","endLine":50,"endColumn":50},{"ruleId":"278","severity":1,"message":"334","line":51,"column":10,"nodeType":"280","messageId":"281","endLine":51,"endColumn":26},{"ruleId":"278","severity":1,"message":"335","line":51,"column":28,"nodeType":"280","messageId":"281","endLine":51,"endColumn":48},{"ruleId":"278","severity":1,"message":"336","line":53,"column":10,"nodeType":"280","messageId":"281","endLine":53,"endColumn":17},{"ruleId":"278","severity":1,"message":"337","line":55,"column":10,"nodeType":"280","messageId":"281","endLine":55,"endColumn":27},{"ruleId":"278","severity":1,"message":"338","line":68,"column":35,"nodeType":"280","messageId":"281","endLine":68,"endColumn":49},{"ruleId":"278","severity":1,"message":"339","line":68,"column":58,"nodeType":"280","messageId":"281","endLine":68,"endColumn":71},{"ruleId":"278","severity":1,"message":"340","line":68,"column":82,"nodeType":"280","messageId":"281","endLine":68,"endColumn":97},{"ruleId":"299","severity":1,"message":"341","line":72,"column":6,"nodeType":"301","endLine":72,"endColumn":8,"suggestions":"342"},{"ruleId":"278","severity":1,"message":"343","line":127,"column":18,"nodeType":"280","messageId":"281","endLine":127,"endColumn":32},{"ruleId":"304","severity":1,"message":"311","line":288,"column":49,"nodeType":"306","messageId":"307","endLine":288,"endColumn":51},{"ruleId":"278","severity":1,"message":"344","line":302,"column":11,"nodeType":"280","messageId":"281","endLine":302,"endColumn":35},{"ruleId":"278","severity":1,"message":"345","line":363,"column":18,"nodeType":"280","messageId":"281","endLine":363,"endColumn":37},{"ruleId":"278","severity":1,"message":"346","line":395,"column":12,"nodeType":"280","messageId":"281","endLine":395,"endColumn":27},{"ruleId":"278","severity":1,"message":"347","line":396,"column":9,"nodeType":"280","messageId":"281","endLine":396,"endColumn":22},{"ruleId":"278","severity":1,"message":"348","line":403,"column":12,"nodeType":"280","messageId":"281","endLine":403,"endColumn":31},{"ruleId":"278","severity":1,"message":"349","line":428,"column":12,"nodeType":"280","messageId":"281","endLine":428,"endColumn":25},{"ruleId":"304","severity":1,"message":"311","line":429,"column":76,"nodeType":"306","messageId":"307","endLine":429,"endColumn":78},{"ruleId":"304","severity":1,"message":"311","line":431,"column":94,"nodeType":"306","messageId":"307","endLine":431,"endColumn":96},{"ruleId":"287","severity":1,"message":"288","line":472,"column":11,"nodeType":"289","endLine":472,"endColumn":73},{"ruleId":"304","severity":1,"message":"305","line":478,"column":15,"nodeType":"306","messageId":"307","endLine":478,"endColumn":17},{"ruleId":"304","severity":1,"message":"305","line":478,"column":36,"nodeType":"306","messageId":"307","endLine":478,"endColumn":38},{"ruleId":"304","severity":1,"message":"305","line":487,"column":25,"nodeType":"306","messageId":"307","endLine":487,"endColumn":27},{"ruleId":"304","severity":1,"message":"305","line":497,"column":135,"nodeType":"306","messageId":"307","endLine":497,"endColumn":137},{"ruleId":"304","severity":1,"message":"305","line":502,"column":164,"nodeType":"306","messageId":"307","endLine":502,"endColumn":166},{"ruleId":"304","severity":1,"message":"305","line":507,"column":152,"nodeType":"306","messageId":"307","endLine":507,"endColumn":154},{"ruleId":"304","severity":1,"message":"305","line":523,"column":23,"nodeType":"306","messageId":"307","endLine":523,"endColumn":25},{"ruleId":"304","severity":1,"message":"305","line":523,"column":52,"nodeType":"306","messageId":"307","endLine":523,"endColumn":54},{"ruleId":"287","severity":1,"message":"288","line":534,"column":98,"nodeType":"289","endLine":534,"endColumn":123},{"ruleId":"287","severity":1,"message":"288","line":540,"column":107,"nodeType":"289","endLine":540,"endColumn":132},{"ruleId":"304","severity":1,"message":"305","line":548,"column":23,"nodeType":"306","messageId":"307","endLine":548,"endColumn":25},{"ruleId":"304","severity":1,"message":"305","line":548,"column":52,"nodeType":"306","messageId":"307","endLine":548,"endColumn":54},{"ruleId":"304","severity":1,"message":"305","line":572,"column":25,"nodeType":"306","messageId":"307","endLine":572,"endColumn":27},{"ruleId":"304","severity":1,"message":"305","line":578,"column":60,"nodeType":"306","messageId":"307","endLine":578,"endColumn":62},{"ruleId":"304","severity":1,"message":"305","line":578,"column":101,"nodeType":"306","messageId":"307","endLine":578,"endColumn":103},{"ruleId":"287","severity":1,"message":"288","line":593,"column":225,"nodeType":"289","endLine":593,"endColumn":253},{"ruleId":"304","severity":1,"message":"305","line":596,"column":72,"nodeType":"306","messageId":"307","endLine":596,"endColumn":74},{"ruleId":"304","severity":1,"message":"311","line":606,"column":68,"nodeType":"306","messageId":"307","endLine":606,"endColumn":70},{"ruleId":"304","severity":1,"message":"305","line":627,"column":19,"nodeType":"306","messageId":"307","endLine":627,"endColumn":21},{"ruleId":"304","severity":1,"message":"305","line":640,"column":19,"nodeType":"306","messageId":"307","endLine":640,"endColumn":21},{"ruleId":"287","severity":1,"message":"288","line":651,"column":15,"nodeType":"289","endLine":651,"endColumn":70},{"ruleId":"278","severity":1,"message":"312","line":1,"column":17,"nodeType":"280","messageId":"281","endLine":1,"endColumn":25},{"ruleId":"278","severity":1,"message":"279","line":1,"column":27,"nodeType":"280","messageId":"281","endLine":1,"endColumn":36},{"ruleId":"278","severity":1,"message":"290","line":1,"column":38,"nodeType":"280","messageId":"281","endLine":1,"endColumn":44},{"ruleId":"278","severity":1,"message":"313","line":3,"column":8,"nodeType":"280","messageId":"281","endLine":3,"endColumn":15},{"ruleId":"278","severity":1,"message":"314","line":3,"column":19,"nodeType":"280","messageId":"281","endLine":3,"endColumn":23},{"ruleId":"278","severity":1,"message":"315","line":5,"column":8,"nodeType":"280","messageId":"281","endLine":5,"endColumn":17},{"ruleId":"278","severity":1,"message":"293","line":6,"column":13,"nodeType":"280","messageId":"281","endLine":6,"endColumn":20},{"ruleId":"278","severity":1,"message":"294","line":7,"column":13,"nodeType":"280","messageId":"281","endLine":7,"endColumn":22},{"ruleId":"299","severity":1,"message":"341","line":38,"column":6,"nodeType":"301","endLine":38,"endColumn":8,"suggestions":"350"},{"ruleId":"351","severity":1,"message":"352","line":52,"column":97,"nodeType":"353","messageId":"325","endLine":52,"endColumn":112,"fix":"354"},{"ruleId":"287","severity":1,"message":"288","line":115,"column":13,"nodeType":"289","endLine":115,"endColumn":75},{"ruleId":"304","severity":1,"message":"305","line":121,"column":17,"nodeType":"306","messageId":"307","endLine":121,"endColumn":19},{"ruleId":"304","severity":1,"message":"305","line":121,"column":40,"nodeType":"306","messageId":"307","endLine":121,"endColumn":42},{"ruleId":"304","severity":1,"message":"305","line":131,"column":135,"nodeType":"306","messageId":"307","endLine":131,"endColumn":137},{"ruleId":"304","severity":1,"message":"305","line":136,"column":146,"nodeType":"306","messageId":"307","endLine":136,"endColumn":148},{"ruleId":"304","severity":1,"message":"305","line":141,"column":152,"nodeType":"306","messageId":"307","endLine":141,"endColumn":154},{"ruleId":"304","severity":1,"message":"305","line":147,"column":27,"nodeType":"306","messageId":"307","endLine":147,"endColumn":29},{"ruleId":"304","severity":1,"message":"305","line":153,"column":62,"nodeType":"306","messageId":"307","endLine":153,"endColumn":64},{"ruleId":"304","severity":1,"message":"305","line":153,"column":109,"nodeType":"306","messageId":"307","endLine":153,"endColumn":111},{"ruleId":"304","severity":1,"message":"305","line":171,"column":74,"nodeType":"306","messageId":"307","endLine":171,"endColumn":76},{"ruleId":"304","severity":1,"message":"311","line":181,"column":74,"nodeType":"306","messageId":"307","endLine":181,"endColumn":76},{"ruleId":"287","severity":1,"message":"288","line":199,"column":17,"nodeType":"289","endLine":199,"endColumn":72},{"ruleId":"278","severity":1,"message":"279","line":1,"column":27,"nodeType":"280","messageId":"281","endLine":1,"endColumn":36},{"ruleId":"278","severity":1,"message":"313","line":3,"column":8,"nodeType":"280","messageId":"281","endLine":3,"endColumn":15},{"ruleId":"278","severity":1,"message":"314","line":3,"column":19,"nodeType":"280","messageId":"281","endLine":3,"endColumn":23},{"ruleId":"278","severity":1,"message":"315","line":5,"column":8,"nodeType":"280","messageId":"281","endLine":5,"endColumn":17},{"ruleId":"278","severity":1,"message":"293","line":6,"column":13,"nodeType":"280","messageId":"281","endLine":6,"endColumn":20},{"ruleId":"278","severity":1,"message":"294","line":7,"column":13,"nodeType":"280","messageId":"281","endLine":7,"endColumn":22},{"ruleId":"278","severity":1,"message":"355","line":10,"column":8,"nodeType":"280","messageId":"281","endLine":10,"endColumn":22},{"ruleId":"278","severity":1,"message":"356","line":43,"column":9,"nodeType":"280","messageId":"281","endLine":43,"endColumn":17},{"ruleId":"278","severity":1,"message":"357","line":49,"column":9,"nodeType":"280","messageId":"281","endLine":49,"endColumn":18},{"ruleId":"278","severity":1,"message":"358","line":52,"column":18,"nodeType":"280","messageId":"281","endLine":52,"endColumn":27},{"ruleId":"304","severity":1,"message":"311","line":85,"column":31,"nodeType":"306","messageId":"307","endLine":85,"endColumn":33},{"ruleId":"304","severity":1,"message":"305","line":86,"column":49,"nodeType":"306","messageId":"307","endLine":86,"endColumn":51},{"ruleId":"304","severity":1,"message":"305","line":158,"column":13,"nodeType":"306","messageId":"307","endLine":158,"endColumn":15},{"ruleId":"304","severity":1,"message":"305","line":213,"column":76,"nodeType":"306","messageId":"307","endLine":213,"endColumn":78},{"ruleId":"304","severity":1,"message":"305","line":214,"column":76,"nodeType":"306","messageId":"307","endLine":214,"endColumn":78},{"ruleId":"304","severity":1,"message":"305","line":223,"column":72,"nodeType":"306","messageId":"307","endLine":223,"endColumn":74},{"ruleId":"304","severity":1,"message":"305","line":224,"column":74,"nodeType":"306","messageId":"307","endLine":224,"endColumn":76},{"ruleId":"287","severity":1,"message":"288","line":252,"column":17,"nodeType":"289","endLine":252,"endColumn":43},{"ruleId":"287","severity":1,"message":"288","line":259,"column":17,"nodeType":"289","endLine":259,"endColumn":40},{"ruleId":"287","severity":1,"message":"288","line":273,"column":17,"nodeType":"289","endLine":273,"endColumn":40},{"ruleId":"278","severity":1,"message":"359","line":1,"column":8,"nodeType":"280","messageId":"281","endLine":1,"endColumn":13},{"ruleId":"278","severity":1,"message":"312","line":1,"column":17,"nodeType":"280","messageId":"281","endLine":1,"endColumn":25},{"ruleId":"278","severity":1,"message":"312","line":1,"column":17,"nodeType":"280","messageId":"281","endLine":1,"endColumn":25},{"ruleId":"278","severity":1,"message":"279","line":1,"column":27,"nodeType":"280","messageId":"281","endLine":1,"endColumn":36},{"ruleId":"278","severity":1,"message":"290","line":1,"column":38,"nodeType":"280","messageId":"281","endLine":1,"endColumn":44},{"ruleId":"304","severity":1,"message":"305","line":6,"column":43,"nodeType":"306","messageId":"307","endLine":6,"endColumn":45},{"ruleId":"304","severity":1,"message":"305","line":7,"column":43,"nodeType":"306","messageId":"307","endLine":7,"endColumn":45},{"ruleId":"278","severity":1,"message":"360","line":7,"column":7,"nodeType":"280","messageId":"281","endLine":7,"endColumn":17},"no-native-reassign",["361"],"no-negated-in-lhs",["362"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'BrowserRouter' is defined but never used.","'getCurrentUser' is defined but never used.","'setupSession' is defined but never used.","'clearSession' is defined but never used.","'getCurrentPage' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useRef' is defined but never used.","'API' is defined but never used.","'graphqlOperation' is defined but never used.","'queries' is defined but never used.","'mutations' is defined but never used.","'setCurrentUser' is defined but never used.","'dashboardIcon' is defined but never used.","'restaurant' is assigned a value but never used.","'setRestaurant' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["363"],"'login' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'login' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["364"],"'name' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'useState' is defined but never used.","'Amplify' is defined but never used.","'Auth' is defined but never used.","'awsConfig' is defined but never used.","'subscriptions' is defined but never used.","'ConsoleLogger' is defined but never used.","'cancelledOrderTimeStamp' is assigned a value but never used.","'timerId' is defined but never used.","React Hook useEffect has missing dependencies: 'getData' and 'orderReceived'. Either include them or remove the dependency array.",["365"],"rest-spread-spacing","Unexpected whitespace after spread property operator.","ExperimentalSpreadProperty","unexpectedWhitespace",{"range":"366","text":"367"},"'customQueries' is defined but never used.","'gql' is defined but never used.","'itemTagsInput' is assigned a value but never used.","'itemImageInput' is assigned a value but never used.","'existingToppings' is assigned a value but never used.","'removableToppings' is assigned a value but never used.","'setRemoveableToppings' is assigned a value but never used.","'removableOptions' is assigned a value but never used.","'setRemoveableOptions' is assigned a value but never used.","'hasMenu' is assigned a value but never used.","'toppingCategories' is assigned a value but never used.","'restaurantData' is assigned a value but never used.","'mutationError' is assigned a value but never used.","'mutationLoading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["368"],"'createToppings' is defined but never used.","'updateRestaurantResponse' is assigned a value but never used.","'addExistingToppings' is defined but never used.","'editToppingName' is defined but never used.","'toppingsClone' is assigned a value but never used.","'editExistingTopping' is defined but never used.","'deleteTopping' is defined but never used.",["369"],"no-whitespace-before-property","Unexpected whitespace before property points.","MemberExpression",{"range":"370","text":"371"},"'settingsDesign' is defined but never used.","'tagInput' is assigned a value but never used.","'timeInput' is assigned a value but never used.","'setVendor' is assigned a value but never used.","'React' is defined but never used.","'apolloProd' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"372","fix":"373"},{"desc":"374","fix":"375"},{"desc":"376","fix":"377"},[5804,5805],"",{"desc":"378","fix":"379"},{"desc":"378","fix":"380"},[2323,2325],".","Update the dependencies array to be: [props]",{"range":"381","text":"382"},"Update the dependencies array to be: [login, props]",{"range":"383","text":"384"},"Update the dependencies array to be: [getData, orderReceived]",{"range":"385","text":"386"},"Update the dependencies array to be: [getData]",{"range":"387","text":"388"},{"range":"389","text":"388"},[1788,1790],"[props]",[1367,1369],"[login, props]",[2851,2853],"[getData, orderReceived]",[3706,3708],"[getData]",[1559,1561]]